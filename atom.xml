<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://fy-han.github.io.git/atom.xml" rel="self"/>
  
  <link href="https://fy-han.github.io.git/"/>
  <updated>2021-11-13T08:37:52.419Z</updated>
  <id>https://fy-han.github.io.git/</id>
  
  <author>
    <name>FY-Han</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GROMACS 并行效率测试与调试</title>
    <link href="https://fy-han.github.io.git/blog/2021/11/13/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E5%88%86%E5%AD%90%E6%A8%A1%E6%8B%9F-GMX-2021-11-13-GROMACS-%E5%B9%B6%E8%A1%8C%E6%95%88%E7%8E%87%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%B0%83%E8%AF%95/"/>
    <id>https://fy-han.github.io.git/blog/2021/11/13/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E5%88%86%E5%AD%90%E6%A8%A1%E6%8B%9F-GMX-2021-11-13-GROMACS-%E5%B9%B6%E8%A1%8C%E6%95%88%E7%8E%87%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%B0%83%E8%AF%95/</id>
    <published>2021-11-13T08:27:13.000Z</published>
    <updated>2021-11-13T08:37:52.419Z</updated>
    
    <content type="html"><![CDATA[<p>GROMACS的并行相比Gaussian等量化软件要复杂的多。GMX手册上有一章<a href="http://manual.gromacs.org/documentation/current/user-guide/mdrun-performance.html">Getting good performance from mdrun</a>，介绍了很多基本概念和例子。不过看完后还是一头雾水，不知道怎么才能获得最佳的运行效率。本文对这些信息进行整理和测试，给出一个基本的调试思路。<br>另外：<a href="http://bbs.keinsci.com/thread-13910-1-1.html?tdsourcetag=s_pcqq_aiomsg">GROMACS GPU加速性能测试文章(JCC,2019)</a>，这篇文章为了主要目的是比较显卡的性价比，所有的测试都是aggregate performance，也就是所有的GMX任务都用1个Rank，一块显卡跑。如果有N个显卡，就跑N个任务，然后把总的ns/day数加起来。这样其实无从知道Gromacs的并行效率。不过这篇文章也说了：“On single-socket nodes with one GPU, using a single rank with as many OpenMP threads as available cores (or hardware threads) is usually fastest”。那么其他情况下gromacs的并行情况如何呢？<br>最后，这篇文章长而且复杂，<br><strong>没有耐心的同学可以直接看第四部分：结论——简单粗暴版，然后可以用第五部分的实用测试命令测试你将要跑的体系，选出最优条件，</strong><br><strong>需要购机的同学可以直接看第四部分：结论——给购机同学的建议。</strong><br><strong>使用超算中心同学可以直接看第四部分：结论——给使用超算中心同学的建议。</strong><br>有兴趣知道背后机制的同学可以详细阅读。</p><p><strong>一, 先搞清楚几个概念。</strong><br><strong>a) Rank 和 Thread</strong><br>    Rank大概可以翻译成进程，和Processes等价，Thread就线程。Gromacs可以在线程和进程这两个层面上并行，这两个的区别大家可以参看<a href="https://www.zhihu.com/question/25532384">线程和进程的区别是什么？</a>。一个Rank可以包含多个thread，在Gromacs并行时，如果使用Rank并行，会使用Domain Decompostion把体系切成小块，每块交给一个Rank去算，而在这个Rank中，多个Thread共同处理这一个小块。<br><strong>b) Gromacs的几种并行方式：</strong><br><strong>1，外部的mpirun并行（rank级别并行）</strong><br>   需要安装openmpi，编译安装的时候加上-DGMX_MPI=on选项，编译产生的运行程序名默认是gmx_mpi，可以跨节点运行。实现方式是</p><ol><li>mpirun -np 4 gmx_mpi mdrun</li></ol><p><em>复制代码</em></p><p><strong>2，内部thread-mpi并行（rank级别并行）</strong><br>   Gromacs源码包含，编译时候默认支持，无法跨节点并行，无法和上面的mpirun并行同时使用，单节点运行时，比mpirun稍快，实现方式是</p><ol><li>gmx mdrun -ntmpi 4</li></ol><p><em>复制代码</em></p><p><strong>3，openmp并行（thread级别并行）</strong><br>   Gromacs源码包含，编译时候默认支持，无法跨节点并行，可以和上面两种MPI并行同时使用，实现方式是</p><ol><li>gmx mdrun -ntomp</li></ol><p><em>复制代码</em></p><p><strong>总结：</strong>单节点运行时，通常采用2+3或者只用3的方式运行，运行方式是：</p><ol><li>gmx mdrun -ntmpi 4 -ntomp 6       #4个MPI rank, 每个rank 使用6个线程，运行时占用24个核</li></ol><p><em>复制代码</em></p><p>跨节点运行时，通常采用1+3的方式运行，运行方式是：</p><ol><li>mpirun -np 2 gmx_mpi mdrun -ntomp 6</li></ol><p><em>复制代码</em></p><p>（2个MPI rank, 每个rank 使用6个线程，运行时占用12个核）<strong><em>这里需要注意的是，不同的并行方式下，GMX对显卡的默认利用方式会不一样，从而带来效率的巨大改变，参见下面的d)-4部分\</em></strong></p><p><strong>c) Gromacs中主要耗时的两类任务</strong><br><strong>1，粒子-粒子相互作用（particle-particle, PP）</strong><br>   在实空间中计算原子之间的两两相互作用力，这些作用主要包括两部分：<strong>非键原子间短程相互作用（NB）</strong>，以及<strong>成键原子之间的相互作用（BF）</strong>。在并行计算时，对于这部分任务采用<strong>Domain Decomposition</strong>的方法，也就是把整个胞像切蛋糕一样切成小块，每块交给一个Rank，在这个Rank中，几个Thread共同计算这个小块中的PP作用力。这里需要注意的的是，如果你的体系本身就比较小，如果使用的Rank太多，或者不合适，会出现no domain decompostion compatible with the given box 的错误。<br><strong>2，粒子网格埃瓦尔德（particle-mesh Ewald，PME)</strong><br>在倒空间中<strong>使用FFT对长程作用力进行计算</strong>，这里的“长程”和上面的“短程”是由mdp参数中的rcoulomb和rvdw参数决定的。这部分计算在倒空间中进行，不能像实空间中的PP那样，可以切成小块，因此Rank并行效率较低。所以如果总Rank数较少，那么这些Rank可以既做PP任务又做PME任务，随着Rank数的增多，更为合适的做法是分出少量的Rank专门做PME任务（当Rank数超过16之后，Gromacs会自动分配PME Rank，在此之前，可以用-npme 选项手动分配PME Rank数），<strong>如果用显卡算PME，目前最多只能分配一个Rank（一块显卡）来做PME计算。</strong></p><p><strong>d) Gromacs的显卡加速</strong><br><strong>1，显卡的并行级别</strong><br>一个Rank进程不能使用多个显卡，但是多个Rank进程可以使用一个显卡。因此如果电脑上有3块显卡，那MPI进程数(thread-mpi,或者openmpi都可以）起码要到3才能使用这3块显卡。<br><strong>2，显卡的加速内容</strong></p><p><img src="/blog/2021/11/13/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E5%88%86%E5%AD%90%E6%A8%A1%E6%8B%9F-GMX-2021-11-13-GROMACS-%E5%B9%B6%E8%A1%8C%E6%95%88%E7%8E%87%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%B0%83%E8%AF%95/forum-16367926478601.php" alt="img"></p><p>此图修改自Gromacs官网，显卡可以代替CPU计算图中的三部分(offloading)，分别是成键原子间的作用力<strong>(Bonded F，下文简称BF)</strong>，短程非键作用力(<strong>Non-bonded F，下文简称NB</strong>)，以及长程非键作用（<strong>PME，下文简称PME</strong>), 前两者也就是前面介绍的<strong>PP</strong>作用，其中Bonded 目前(2019.3版本)仅支持N卡，其中GPU加速的PME只支持单Rank计算并且mdp参数必须是PME-order=4，还有一些其他限制详见手册。<br><strong>3，**</strong>显卡的加速的开启以及查看<strong>**方法</strong><br>这3个部分手动切换cpu/gpu在mdrun的选项中分别是-bonded -nb  -pme，<br><strong>如果不清楚显卡执行了哪部分任务，可以在md.log中查看</strong>，看到类似下面的描述<br>Using 4 MPI threads                                                                        #使用四个MPI rank<br>Using 10 OpenMP threads per tMPI thread                                                   #每个thread-MPI rank使用10个OpenMP thread</p><p>On host node02 2 GPUs selected for this run.                                                #使用2个显卡计算<br>Mapping of GPU IDs to the 4 GPU tasks in the 4 ranks on this node:<br>  PP:0,PP:0,PP:1,PME:1                                                                     #2个PP任务分配给id=0的显卡，1个PP任务和1个PME任务分配给id=1的显卡<br>PP tasks will do (non-perturbed) short-ranged and most bonded interactions on the GPU        #PP任务包括了计算大部分Bonded和短程Non-bonded作用<br>PME tasks will do all aspects on the GPU                                                     #PME任务全部在GPU上进行<br><strong>4，默认利用显卡加速情况</strong><br>这里单独强调一下默认情况下（就是不额外加控制显卡的参数）显卡会执行哪些任务：<br>单Rank并行下：<br>显卡自动执行NB+PME计算，BF交给GPU，如果使用-pme cpu选项强行把PME分配给CPU，那么显卡会自动执行NB+BF计算。<br>多rank并行下：<br>显卡会自动执行NB+BF计算，PME交给CPU，此时如果要利用显卡计算PME，必须使用-pme gpu -npme 1 单独分配一个rank来进行PME计算<br><strong>5，利用显卡加速的5种情况（以及对应的命令行选项）</strong><br>下面总结一下利用显卡加速的5种情况，<br>0：不用显卡加速（ -nb cpu -pme cpu -bonded cpu ）<br>1：用显卡做NB计算（-nb gpu -pme cpu -bonded cpu ）<br>2：用显卡做NB+PME计算（-nb gpu -pcme gpu -bonded cpu ）多rank并行还需加上 -npme 1<br>3：用显卡做NB+BF计算（-nb gpu -pme cpu -bonded gpu ）<br>4：用显卡做NB+PME+BF计算（-nb gpu -pme gpu -bonded gpu ）多rank并行还需加上 -npme 1<br>注意到这里我们<strong>只有用显卡加速了NB部分，才能进一步加速BF和PME部分</strong>。</p><p><strong>二, 测试条件</strong><br><strong>a) 硬件环境</strong><br>cpu：XEON E5-2699V4 <em> 2，显卡：华硕TURBO-RTX2080-8G X 2 or 耕升GTX-1080 追风 X 2，内存：128G，主板：msi X10dai<br><strong>b) 软件环境</strong><br>操作系统：CentOS7，CUDA版本：10.2， gcc版本：7.3.1，gromacs版本：2019.3安装方法参考：<a href="http://sobereva.com/457">GROMACS的安装方法</a><br><strong>c) 测试方法</strong><br>测试系统：<a href="http://www.gromacs.org/GPU_acceleration">Gromacs官网</a>上的<a href="ftp://ftp.gromacs.org/pub/benchmarks/ADH_bench_systems.tar.gz">ADH例子</a>中的adh_cubic<br>体系大小：13.4W个原子，11</em>11*11nm的盒子<br>测试命令：</p><ol><li>gmx mdrun -ntmpi 4 -ntomp 6 -s ADH.tpr -cpt 1440 -nsteps 15000 -resetstep 5000 -v -noconfout -gpu_id 0 -pme gpu -npme 1 -bonded gpu -nb gpu -gputasks 0001</li></ol><p><em>复制代码</em></p><p>下面对用到的mdrun的一些选项进行做说明：<br>-ntmpi X         使用X个rank进行并行<br>-ntomp X        每个rank使用X个openmpi线程<br>-cpt  X          间隔X分钟写入checkpointfile<br>-nsteps X        一共跑X步md<br>-resetstep X      在第X步时开始重新计时（因为头几千步，gromacs会进行自动调试，此时速度还不稳定）<br>-gpu_id  01    使用id为X和Y的显卡计算，比如-gpu_id 0123，说明使用4块显卡进行计算, -gpu_id 12，使用第二块和第三款显卡。<br>-pme cpu/gpu   使用cpu或gpu进行pme计算<br>-nb cpu/gpu     使用cpu或gpu进行nb计算<br>-bonded cpu/gpu 使用cpu或gpu进行bonded force计算<br>-npme X         在多rank并行情况下，使用X个rank进行pme计算<br>-gputasks 0011  在多rank并行情况下，每个rank分配给哪块cpu，比如8 Rank并行时（-ntmpi 8），而我有3块gpu， 那么-gputasks 00001122 表明前4个Rank分给第一块显卡，中间两个Rank分给第二块显卡，最后2个Rank分给第三块显卡，这个选项不能和-gpu_id选项同时出现。至于这些Rank哪些是pme Rank 哪些是pp Rank则可以用-ddorder选项控制，详见手册中-ddorder选项的说明，默认的是pp Rank在前pme Rank 在后。</p><p><strong>三, 测试内容</strong><br><strong>a) 单Rank，单显卡</strong><br>这时候可以调节的参数有openmp的核数-ntomp，以及是否把BF(Bonded F)，NB(Non-bonded F)，PME任务分配给显卡计算。</p><p><img src="/blog/2021/11/13/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E5%88%86%E5%AD%90%E6%A8%A1%E6%8B%9F-GMX-2021-11-13-GROMACS-%E5%B9%B6%E8%A1%8C%E6%95%88%E7%8E%87%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%B0%83%E8%AF%95/forum-16367926478612.php" alt="img"></p><p>图一：计算速度随openmp线程数的变化情况，图中的5条曲线分别对应于把不同的任务分配给GPU时的情况</p><p><img src="/blog/2021/11/13/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E5%88%86%E5%AD%90%E6%A8%A1%E6%8B%9F-GMX-2021-11-13-GROMACS-%E5%B9%B6%E8%A1%8C%E6%95%88%E7%8E%87%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%B0%83%E8%AF%95/forum.php" alt="img"></p><p>表一：从md.log中提取出的具体项目的耗时情况，第一行中的Tn表示线程数，红色加粗的是NB+BF部分的耗时，蓝色加粗的是PME部分的耗时。<br><strong>分析：</strong><br>1）BF(bonded force)部分的计算是否分配给GPU影响不大，显卡任务没饱和时，BF分给显卡较快，显卡任务饱和了以后BF分给CPU较快。<br>2）在拥有一个比较好的显卡情况下，把PME部分分配给显卡可以显著提高计算速度。<br>3）PME分配给显卡后，计算速度在10个openmp线程左右达到了上限，这是因为GPU的运算成为瓶颈。原因如下：对比表一中的第一列（T2 NB+PME）和第二列（T40 NB+PME），可以发现随着并行线程数的增加，主要耗时项目由Force（这是CPU计算BF的耗时）变成Wait GPU NB local（这是等待GPU计算NB的耗时）。<br>4）PME分配给CPU的情况下，计算速度在10个线程前快速上升，之后上升速度减慢，到30个线程时达到上限。根据表二中的第三列(T40 NB+BF)我们发现此时CPU计算PME的任务(PME mesh)是计算的瓶颈。<br>5）在不使用GPU的情况下，通过表一的最后第四列可以发现，PP的计算是最耗时的项目（Force），其次是PME的计算（PME mesh），但是计算PP的并行效率高，所以到40核的时候（第五列），PME反而成为最耗时的项目。</p><p><strong>b) tMPI多Rank，单显卡</strong></p><p><img src="/blog/2021/11/13/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E5%88%86%E5%AD%90%E6%A8%A1%E6%8B%9F-GMX-2021-11-13-GROMACS-%E5%B9%B6%E8%A1%8C%E6%95%88%E7%8E%87%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%B0%83%E8%AF%95/forum-16367926478614.php" alt="img"></p><p>图二：多Rank并行下，计算速度随openmp线程数的变化情况。<br><strong>分析：</strong><br>单线程使用GPU计算NB+PME时，运行速度最快，此时CPU并行在10线程左右达到上限。显卡成为了运算的瓶颈，那么还剩下的34核能否进一步提高计算速度？<br>在显卡成为瓶颈的情况下想要进一步提高运算速度，必须把显卡的PME任务分给CPU（上面说过NB任务不能单独分给CPU）。<br>在上面单线程情况下，用CPU计算PME时，30核就基本达到速度上限，此时运算速度并不能超过GPU计算PME的速度。<br>那么使用多rank的情况下，能否提高CPU计算PME的并行效率呢？<br>答案是否定的，经过我的测试，4 Rank，每Rank10线程和1 Rank，40线程的运行PME mesh的时间是基本相当的。<br>不仅如此，多Rank情况下还会有额外的耗时，包括domain decomposition (DD)的耗时，多Rank共用一块显卡造成的效率下降，PP rank 和PME rank 之间的负载不平衡，DD 造成的负载不平衡。最后结果如图二所示，在一块显卡的情况下使用多Rank并行，并不能带来运算速度的提升。4<em>10=40核的运算速度反而没有1</em>10=10核的运算速度快。<br>因此：<strong>单显卡使用多Rank时，多Rank对PME的运算效率不会提高，同时多Rank并行会带来一堆额外的耗时项目和负载不平衡，最终会带来速度的下降。</strong></p><p><strong>c) tMPI 多Rank，双显卡</strong></p><p><img src="/blog/2021/11/13/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E5%88%86%E5%AD%90%E6%A8%A1%E6%8B%9F-GMX-2021-11-13-GROMACS-%E5%B9%B6%E8%A1%8C%E6%95%88%E7%8E%87%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%B0%83%E8%AF%95/forum-16367926478615.php" alt="img"></p><p>图三：多Rank并行下，使用2块显卡的计算速度随openmp线程数的变化情况。<br><strong>分析：</strong><br>1）多Rank下，不使用GPU计算PME的情况：  图三中的黄线和深蓝线，这是在运行gmx mdrun时不额外加“-pmp gpu -npme 1”时的默认结果。此时使用cpu计算pme，拿两块显卡去计算NB和BF，可以看到此时cpu计算PME成为了瓶颈，所以两块显卡算NB，反而还没有一块显卡同时计算NB+PME快。不仅如此，更为荒谬的是两块显卡算NB+BF时还没有一块显卡算NB+BF快（对比图三种的黄线最后一个点<50ns 和图一中黄线中间的点>70ns)。这应该是在使用显卡算NB后，CPU计算PME成为了瓶颈，而PME多rank并行的效率并没有提高，加速多Rank运行时各种负载不平衡带来的消耗。<br>2）多Rank下，使用GPU计算PME的情况：<br>  即使加上“-pmp gpu -npme 1”后，在2 Rank情况下使用1块显卡计算PME，1块显卡计算NB，速度竟然没有只使用1块显卡同时算PME和NB快。通过观察md.log中的结果可以发现，耗时项最大的是PME wait for PP <em>，大概意思就是一块显卡PME算好了，等另外一块显卡算NB等了半天。还可以看到log文件中“Average PME mesh/force load: 0.738”这样的描述，也就是PME/PP负载不平衡以及Rank之间通信造成了效率低下。在4 Rank下，<em>*拿出1个Rank做PME，以及3个Rank做PP后，PP/PME负载不平衡的情况情况得到了改善，此时两块显卡的运算速度也终于略微超过一块。</em></em><br>3）多Rank下GPU的任务分配：<br>  默认情况下Rank任务是平均分配给GPU的，比如这里我有4个Rank任务，2个GPU，那么平均一个GPU分到2个Rank，由于3个Rank是PP，一个Rank是PME，最后结果就是一个显卡计算2个PP任务，一个显卡计算1个PME+1个PP任务。此时可以用-gputasks 选项分配如何把这4个rank分给GPU，这4个rank中，前3个是PP rank，最后一个是PME rank，因此如果是”-gputasks 0001” 指定前三个PP rank分给0号gpu，最后一个PME rank分给1号gpu，而”-gputasks 0011”则相当于默认情况。本次测试中两种请</50ns></p><p><strong>d) N任务，N显卡</strong><br>上面的测试表明，两块显卡相对于一块显卡的提升非常有限。如果装了两块显卡，想有效的利用这两块显卡，最好的办法是每块显卡跑一个独立gmx任务。问题是，这两个独立的gmx会相互干扰么？经过测试，结论是：<strong>cpu核数足够的情况下两块显卡单独运行两个Gromacs任务完全没有影响</strong>。<a href="http://bbs.keinsci.com/thread-13910-1-1.html?tdsourcetag=s_pcqq_aiomsg">JCC,2019</a>的那篇文章中也可以看到，N显卡相对于单显卡的速度几乎就是N倍。<strong></strong><br><strong>e) GTX1080的表现</strong></p><p><img src="http://bbs.keinsci.com/forum.php?mod=attachment&amp;aid=MjA2MDZ8ZTZjMWI5OTl8MTYzNjU2NDM4NXwyNjY4NXwxMzg2MQ%3D%3D&amp;noupdate=yes" alt="img"></p><p>图四：2块1080显卡的测试情况，其中图标R2:NB+PME的意思是使用2个Rank，用GPU算NB和PME。<br><strong>分析：</strong><br>1080和2080相比有下面一些相同和不同点<br>相同点：<br>1）单Rank下，显卡计算NB+PME时，CPU在10核计算速度达到饱和。<br>2）单显卡下，双Rank比单Rank慢<br>3）双显卡下，只有使用4Rank，且用显卡计算NB+PME时，速度才能略微超过单显卡情况<br>不同点：<br>1）单Rank下，随着openmp threads数量增多，显卡计算NB+BF的速度最终超过了NB+PME，这是因为1080性能略差，这样CPU并行数量上去之后，CPU计算PME的速度最终能够超过GPU计算PME的速度。</p><p><strong>f) 关于PME tuning</strong><br>PME部分的计算其实还有很多可以调控的地方，我没有深入研究，这里简单介绍一下：<br>1）tunepme，这是mdrun的选项，默认为开启，在CPU计算NB，GPU计算PME的情况下，为了使两边计算负载平衡，达到同步完成，gromacs采用了PME调控功能，其原理是增大rcoulomb，同时增加Fourierspacing，也就是减少FFT 格点数，使将使得更多的粒子长程作用从PME部分划分给NB部分。从而减少PME的计算量。所有我们在mdp文件中可以将rcoulomb和Fourierspacing 设小一点（比如0.8和1），让mdrun自行调控。</p><p><img src="/blog/2021/11/13/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E5%88%86%E5%AD%90%E6%A8%A1%E6%8B%9F-GMX-2021-11-13-GROMACS-%E5%B9%B6%E8%A1%8C%E6%95%88%E7%8E%87%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%B0%83%E8%AF%95/forum-16367926478617.php" alt="img"></p><p>2）vdwtype，这是mdp参数，如果设为pme，那么会使用PME计算长程VDW作用，不过如果这样做，无法使用GPU进行PME计算，这就相当于把更多的任务分配给了PME，因此，如果GPU很次，可以尝试这种做法。<br>3）pmefft，这是mdrun的选项，可以把PME的3D FFT单独分配给CPU算，而其他部分任然交给GPU算，据说用比较次的GPU搭配很好的CPU可以用这个选项，但是我尝试之后并没有得到积极的结果。<br>4）gmx tune_pme，这是gmx的一个程序，可以系统的优化PME参数，在给定总的Rank数情况下优化计算PME的rank数，以及rcolulomb和Fourierspacing的参数。比如：</p><ol><li>gmx tune_pme -mdrun ‘gmx mdrun -pme cpu’ -ntmpi 1 -ntomp 44 -rmax 2 -rmin 0 -ntpr 10 -gpu_id 0 -r 2 -fix 0 -s c05.tpr</li></ol><p><em>复制代码</em></p><p>的意思是使用cpu算PME(-pme cpu),一共只使用1个tmpi rank(-ntmpi 1),对10个不同的rcoulomb设置进行测试(-ntpr 10)，其中rcoulomb最大值是2(-rmax 2), 最小值是tpr中的设定值(-rmin 0), 不使用独立的pme rank (-fix 0)，使用1个id为0的gpu加速计算(-gpu_id 0), 每个测试运行两遍(-r 2)</p><ol><li>gmx tune_pme -mdrun ‘gmx_mpi mdrun’ -np 20 -ntomp 2 -min 0.25 -max 0.5 -rmax 1.5 -rmin 0 -ntpr 5 -gpu_id 0 -r 2 -resetstep 3000 -steps 3000 -s c05.tpr</li></ol><p><em>复制代码</em></p><p>使用20个openmpi rank(-np 20), 每个rank使用2个openmp thread, 其中PME 线程数从20<em>0.25=5个(-min 0.25) 测试到 20</em>0.5=10个 (-max 0.5)，每次测试运行3000步之后开始计时（-resetstep 3000), 计时时间为3000步(-steps 3000)。<br>该命令的更多选项见手册.</p><p><strong>g) cpu频率的影响</strong></p><p><img src="/blog/2021/11/13/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E5%88%86%E5%AD%90%E6%A8%A1%E6%8B%9F-GMX-2021-11-13-GROMACS-%E5%B9%B6%E8%A1%8C%E6%95%88%E7%8E%87%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%B0%83%E8%AF%95/forum-16367926478618.php" alt="img"></p><p>图五：单Rank，使用显卡跑NB+PME任务时，CPU频率对运算速度的影响。<strong>分析：</strong><br>因为我们的结论是单Rank单显卡跑MD任务效率最高，那么剩下的问题就是CPU的频率以及核心数是如何影响运算速度的。<br>根据图五的结果我们可以做以下几点分析：<br>1）cpu高频时，能用更少的核的达到速度上限。<br>2）cpu低频时，10核之前并行效率高，10-20核并行效率低，20核之后并行效率几乎没有。<br>3）cpu频率的高低，会影响到速度上限的高低。</p><p><strong>四, 结论：</strong><br><strong>抽象版：</strong>影响Gromacs效率的关键是下面3个平衡：<br>1，PME-NB运算任务之间的平衡。<br>1，CPU-GPU负载平衡。<br>2，多Rank并行时，Rank之间的负载平衡。<br>我们主要通过决定把多少资源（GPU，CPU，Rank）分配给PME和NB任务来实现上面的平衡。<br><strong><br>**</strong>简单粗暴版：<strong></strong>单显卡情况下：<em>*<br>只用1个Rank（运行时单进程多线程并行），如果显卡足够好，把PME任务给显卡，openmp theads 12个左右；命令如下：<br>gmx mdrun -pin on -ntmpi 1 -ntomp 12 -pme gpu XXX.tpr</em>复制代码*如果显卡较差，把PME任务给CPU，openmp theads 越多越好（一般超过20，计算速度达到上限），命令如下：</p><ol><li>gmx mdrun -pin on -ntmpi 1 -ntomp 20 -pme cpu XXX.tpr</li></ol><p><em>复制代码</em></p><p><strong>多显卡情况下：</strong><br>最好是给每个显卡一个Rank，单独跑一个Gromacs任务，命令如下：</p><ol><li>gmx mpirun -ntmpi 1 -ntomp 12 -gpu_id 0 -s abc.tpr #使用0号gpu计算abc.tpr</li><li>gmx mpirun -ntmpi 1 -ntomp 12 -gpu_id 1 -s xyz.tpr #使用1号gpu计算abc.tpr</li></ol><p><em>复制代码</em></p><p>如果非要用多个显卡跑一个MD任务，请把一个PME rank分配给显卡，其他的3个PP Rank分配给其他的显卡，命令如下：</p><ol><li>gmx mdrun -pin on -ntmpi 4 -ntomp 8 -pme gpu -npme 1 XXX.tpr</li></ol><p><em>复制代码</em></p><p><strong>给购机同学的建议：</strong><br>由于最高的效率的资源利用方式是单显卡跑任务，所以一个机器里面装多显卡的目的主要是为了同时跑多个gromacs任务（并且不占地方，便于操作），这时候需要考虑的是cpu核心数/gpu的比例，根据本次测试的结果，在GPU跑PME+NB，对于1080显卡，cpu 8核就能达到速度上限，对于 2080显卡，cpu 10 核就能达到上限，这说明越是好的显卡，也需要更多/更快的cpu核心数与之配套，才能充分发挥这块显卡的功能，另外根据第三部分g）CPU频率的测试可以发现，cpu10核之内thread并行效率高，10-20核并行效率低，20核之后并行效率几乎没有，因此<strong>如果只配一块显卡，我们有一个核心数较少（8-12）频率较高的CPU就够了，比如桌面级别的I7，I9，如果要装多显卡的机器，那么选择cpu的时候最好满足10核左右/1块显卡比例</strong>（如果cpu主频够高，可以适当降低核心数要求）<strong>，</strong>在此基础上，利用公式：cpu频率<em> min(显卡数</em>10，cpu核心数) / price，来计算搭配cpu的性价比。<br><strong><br>**</strong>给使用超算中心同学的建议：<strong></strong>对于slurm系统，你在用sbatch提交任务的时候，不管它的节点上有几块显卡 ，你每次提交任务的时候一律用从0开始，一次用一块显卡算就是-gpu id 0。一次用两块显卡算就是-gpu_id 01,** 这是因为大多数slurm系统都用cgroup管理资源。最大的资源的利用仍然是一次使用一块gpu，一个提交脚本申请一个gpu，提交一个任务即可，至于配合多少cpu，偷懒的话直接设成10，否者用下面一节测试脚本中的多GPU多任务情况的命令测试一下，需要多少CPU核数够。如果GPU节点上有多块显卡而又强制是exclusive模式（独占节点模式），那么应当在一个提交脚本中写入多个任务，或者使用多显卡算一个任务（4 Rank并行，PME分配给GPU）（待补充）</p><p><strong>五, 测试脚本</strong><br>最后附上本次测试用到的脚本：gmxbench.sh<br>安装之后（放到PATH路径下，加可执行权限），运行方法如下：</p><ol><li>gmxbench.sh -r “1 2 4” -T “2 2 10” -g “0 01” -G “0 1 2 3 4” -a “-pin on” -s 20000 -S 10000 XXX.tpr</li></ol><p><em>复制代码</em></p><p>意思是，测试rank 为 1 2 4 时候的情况 (-r “1 2 4”)<br>对于每种rank设置，测试openmp 线程为“2 4 6 8 10”时候的情况(-T “2 2 10”)<br>对于上面每种设置，分别测试只使用0号GPU和同时使用01号GPU的情况(-g “0 01”)<br>对于上面每种设置，分别测试gpu分配任务为“0 1 2 3 4”时候的情况，这里的代号和第一部分中的“显卡加速的5种情况”中的编号对应(-G “0 1 2 3 4”)<br>每次测试运行20000步(-s 20000)，从10000步开始计时(-S 10000)，注意-S如果设置过小（比如小于5000，可能会因为还未完成pme tune 而出错）<br>最后额外添加关键词“-pin on” (-a “-pin on”)另外可以输入gmxbench.sh -h 查看帮助<br><strong>实用测试命令：</strong><br>根据我们的上面的结论，其实不用做那么多测试，下面是实用的测试命令<br><strong>单GPU情况：</strong></p><ol><li>gmxbench.sh -r 1 -g 0 -G “2 3” -a “-pin on” -s 20000 -S 10000 XXX.tpr </li></ol><p><em>复制代码</em></p><p>这里主要区别把PME分给CPU快还是GPU快，这里不设置openmp thread 会默认使用最大thread<br><strong>多GPU单任务情况：</strong></p><ol><li>gmxbench.sh -r “1 4” -g “0 01” -G “2 3” -a “-pin on” -s 20000 -S 10000 XXX.tpr</li></ol><p><em>复制代码</em></p><p>这里主要区别把PME分给CPU还是GPU以及是使用单Rank快还是4 Rank快，以及是用一块gpu快还是2块gpu快。。。这里不设置openmp thread 会默认使用最大thread<br><strong>多GPU多任务情况：</strong></p><ol><li>gmxbench.sh -r “1” -g “0” -G “2” -T “6 2 20” -a “-pin on” -s 20000 -S 10000 XXX.tpr</li></ol><p><em>复制代码</em></p><p>这里主要是看使用一个GPU算一个任务时，用多少CPU能把GPU”喂饱“，因此我们固定其他参数，只扫描openmp线程，从6开始，每次增加2核，扫描到20（-T 2 1 20）<br><strong>测试完成后自动给出耗时统计，如果中途意外中断了可以重新运行相同的命令，会自动续算。</strong><br>本人做动力学经验不多，希望各位动力学大佬提出宝贵建议和补充！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;GROMACS的并行相比Gaussian等量化软件要复杂的多。GMX手册上有一章&lt;a href=&quot;http://manual.gromacs.org/documentation/current/user-guide/mdrun-performance.html&quot;&gt;Getti</summary>
      
    
    
    
    
    <category term="gmx" scheme="https://fy-han.github.io.git/tags/gmx/"/>
    
  </entry>
  
  <entry>
    <title>hexo图片配置与hexo主题</title>
    <link href="https://fy-han.github.io.git/blog/2021/11/13/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E5%8D%9A%E5%AE%A2-2021-3-10-hexo-github%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98-2021-11-13-hexo%E5%9B%BE%E7%89%87%E9%85%8D%E7%BD%AE/"/>
    <id>https://fy-han.github.io.git/blog/2021/11/13/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E5%8D%9A%E5%AE%A2-2021-3-10-hexo-github%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98-2021-11-13-hexo%E5%9B%BE%E7%89%87%E9%85%8D%E7%BD%AE/</id>
    <published>2021-11-13T06:44:36.000Z</published>
    <updated>2021-11-13T07:33:48.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生成图片文件夹"><a href="#生成图片文件夹" class="headerlink" title="生成图片文件夹"></a>生成图片文件夹</h2><p><strong>关键</strong>！！</p><blockquote><p>修改 <strong>hexo 目录下</strong>的 .config.yml 文件，将 <code>post_asset_folder: false</code> 修改为 <code>post_asset_folder: true</code>。</p></blockquote><p>安装图片路径转换的hexo插件（用git bash在hexo根目录中）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/FY-Han/hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>别用codefalling那一套</p><p>注意将md和文件夹放在同一级，然后就直接导入picture就行。可以用hexo s预览一下。</p><p>这里我们给出两种办法来引用图片。</p><ol><li>直接使用代码 <img src="/blog/2021/11/13/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E5%8D%9A%E5%AE%A2-2021-3-10-hexo-github%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98-2021-11-13-hexo%E5%9B%BE%E7%89%87%E9%85%8D%E7%BD%AE/hexo.png" alt> （虽然没有写文件夹的名字，但是可以的)，hexo.png 是我们存在 new article 文件夹内的图片。这时你会发现markdown预览中无法显示这张图片，但是当你将博客上传到网站时，网站上是可以正常显示的。</li><li>使用代码 <img src="/blog/2021/11/13/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E5%8D%9A%E5%AE%A2-2021-3-10-hexo-github%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98-2021-11-13-hexo%E5%9B%BE%E7%89%87%E9%85%8D%E7%BD%AE/hexo.png" alt>不仅可以本地预览，上传到网站也可以正常显示。</li><li>本地无法预览也是件很不舒服的事情，其实我们还可以另外创建一个文件夹 pictures ，里面专门存放所有文章的图片，代码 <img src="/blog/2021/11/13/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E5%8D%9A%E5%AE%A2-2021-3-10-hexo-github%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98-2021-11-13-hexo%E5%9B%BE%E7%89%87%E9%85%8D%E7%BD%AE/hexo.png" alt> 不仅可以本地预览，上传到网站也可以正常显示。<br> <strong>注意</strong>： 不管采取哪种办法，都要创建一个和md文件同名的文件夹，里面放上需要的图片。<br> 如果 2和3 中代码无法实现网站上的正常显示，那就使用 1 中的代码。因为 2和3 中代码我无法保证每个人都成功。</li></ol><hr><p>版权声明：本文为CSDN博主「神奇小海螺」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_36408085/article/details/104117319">https://blog.csdn.net/qq_36408085/article/details/104117319</a></p><h2 id="hexo-主题"><a href="#hexo-主题" class="headerlink" title="hexo 主题"></a>hexo 主题</h2><p><a href="https://www.jianshu.com/p/e4db4f7ed45f">Hexo搭建GitHub博客—打造炫酷的NexT主题—高级(三) - 简书 (jianshu.com)</a></p><p><a href="https://www.jianshu.com/p/c04b4f55c38c">Hexo搭建GitHub博客—打造炫酷的NexT主题—高级(四) - 简书 (jianshu.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;生成图片文件夹&quot;&gt;&lt;a href=&quot;#生成图片文件夹&quot; class=&quot;headerlink&quot; title=&quot;生成图片文件夹&quot;&gt;&lt;/a&gt;生成图片文件夹&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;关键&lt;/strong&gt;！！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;修改 &lt;stro</summary>
      
    
    
    
    
    <category term="博客建立" scheme="https://fy-han.github.io.git/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%8B/"/>
    
  </entry>
  
  <entry>
    <title>GROMACS PCA</title>
    <link href="https://fy-han.github.io.git/blog/2021/11/13/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E5%88%86%E5%AD%90%E6%A8%A1%E6%8B%9F-GMX-2021-11-13-GROMACS-PCA/"/>
    <id>https://fy-han.github.io.git/blog/2021/11/13/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E5%88%86%E5%AD%90%E6%A8%A1%E6%8B%9F-GMX-2021-11-13-GROMACS-PCA/</id>
    <published>2021-11-13T05:05:29.000Z</published>
    <updated>2021-11-13T08:27:51.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>将能量都投射到到两个主成分上显示</p><h2 id="附录-GROMACS续跑与画图"><a href="#附录-GROMACS续跑与画图" class="headerlink" title="附录-GROMACS续跑与画图"></a>附录-GROMACS续跑与画图</h2><h3 id="Gromacs续跑"><a href="#Gromacs续跑" class="headerlink" title="Gromacs续跑"></a>Gromacs续跑</h3><h4 id="Gromacs-中断后续跑"><a href="#Gromacs-中断后续跑" class="headerlink" title="Gromacs 中断后续跑"></a>Gromacs 中断后续跑</h4><p>MD中断前的作业运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gmx mdrun -V -deffnm md</span><br></pre></td></tr></table></figure><p>MD作业中断后可以继续用mdrun接着续跑，只需要加上-cpi md.cpt和-s md.tpr的参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gmx mdrun -s md.tpr -cpi md.cpt -deffnm md</span><br></pre></td></tr></table></figure><p>mdrun默认会将新产生的轨迹添加到原始文件末尾，最终文件会包括中断前与续跑后的所有内容。</p><h4 id="Gromacs延长时间再跑"><a href="#Gromacs延长时间再跑" class="headerlink" title="Gromacs延长时间再跑"></a>Gromacs延长时间再跑</h4><h5 id="续跑10ns且单独生成文件"><a href="#续跑10ns且单独生成文件" class="headerlink" title="续跑10ns且单独生成文件"></a>续跑10ns且单独生成文件</h5><p>MD作业已经完整跑完，延续之前的模拟参数，再跑额外的10ns模拟，可以使用convert-tpr重新生成新的md2.tpr，并用-extend 10000选项将模拟时间延长10ns后重新mdrun提交新作业md2，并且在mdrun参数选项中加上原始的cpt文件-cpi md1.cpt，最后的-noappend选项则表示生成单独的后续文件而不续写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gmx convert-tpr -s md1.tpr -extend 10000 -o md2.tpr</span><br><span class="line">gmx mdrun -V -deffnm md2 -cpi md.cpt -noappend </span><br></pre></td></tr></table></figure><p>最终会得到md2.part0002.xtc/log/edr/gro/cpt，这是将后续10ns的结果单独生成新的文件。</p><h5 id="续跑10ns且续写入源文件"><a href="#续跑10ns且续写入源文件" class="headerlink" title="续跑10ns且续写入源文件"></a>续跑10ns且续写入源文件</h5><p>MD作业已经完整跑完，延续之前的模拟参数，再跑额外的10ns模拟，可以使用convert-tpr命令直接修改原始的md.tpr，并用-extend 10000选项将模拟时间延长10ns后重新mdrun提交新作业md，并且在参数选项中加上原始的cpt文件-cpi md.cpt即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gmx convert-tpr -s md1.tpr -extend 10000 -o md.tpr</span><br><span class="line">gmx mdrun -V -deffnm md -cpi md1.cpt</span><br></pre></td></tr></table></figure><h3 id="Gromacs画图"><a href="#Gromacs画图" class="headerlink" title="Gromacs画图"></a>Gromacs画图</h3><ol><li><p>计算RMSD</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#source &#x2F;home&#x2F;murphy&#x2F;gromacs&#x2F;Gromacs_mpi&#x2F;bin&#x2F;GMXRC</span><br><span class="line">gmx_mpi rms -f md.xtc -s complex_ions.gro</span><br></pre></td></tr></table></figure><p>选择相应的组分，生成rmsd.xvg文件。</p></li><li><p>提取10ns模拟体系中的后2ns</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#source &#x2F;home&#x2F;murphy&#x2F;gromacs&#x2F;Gromacs_mpi&#x2F;bin&#x2F;GMXRC</span><br><span class="line">gmx_mpi trjconv -f md.xtc -o MmPbsa.xtc -b 8000 -e 10000</span><br></pre></td></tr></table></figure><p>gmx中以ps为单位，-b 8000 -e 10000为begin和end时间窗口。</p></li><li><p>RMSD画图</p></li></ol><ul><li>将rms命令生成的rmsd.xvg文件用gnuplot作图。<br>  首先去掉rmsd.xvg中的注释信息。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">cat rmsd.xvg |grep -v -E &quot;#|@&quot; &gt;rmsd_1.xvg</span><br><span class="line">gnuplot &lt;&lt;EOF</span><br><span class="line">set term pngcairo lw 2 font &quot;Times_New_Roman,14&quot;</span><br><span class="line">set output &quot;rmsd.png&quot;</span><br><span class="line">set xlabel &#39;Time (ps)&#39;</span><br><span class="line">set ylabel &#39;RMSD (nm)&#39;</span><br><span class="line">set title &#39;RMSD&#39;</span><br><span class="line">unset key</span><br><span class="line">plot &#39;rmsd_1.xvg&#39; with line linetype 1 linewidth 1</span><br><span class="line">set output</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ol><li><p>g_MMPBSA后作图，多个图叠合在一起</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">gnuplot &lt;&lt;EOF</span><br><span class="line">set term pngcairo lw 2 font &quot;Times_New_Roman,14&quot;</span><br><span class="line">set output &quot;a.png&quot;</span><br><span class="line">set xlabel &#39;Residue Number&#39;</span><br><span class="line">set ylabel &#39;Contribution Energy (kJ&#x2F;mol)&#39;</span><br><span class="line">set title &#39;Contribution of residues to the binding energy&#39;</span><br><span class="line">#unset key</span><br><span class="line">set xrange [1:306]</span><br><span class="line">#set xtics 1,1,306 </span><br><span class="line">#unset border</span><br><span class="line">#set zeroaxis lt -1 lw 2</span><br><span class="line">plot &#39;cq-3.dat&#39; with line linetype 1 linewidth 1 title &quot;CQ-1&quot;,&#39;cq-2.dat&#39; with line linetype 2 linewidth 1 title &quot;CQ-2&quot;, &#39;hcq.dat&#39; with line linetype 3 linewidth 1 title &quot;HCQ-1&quot;,&#39;hcq-3.dat&#39; with line linetype 4 linewidth 1 title &quot;HCQ-2&quot; </span><br><span class="line">#plot &#39;cq-3.dat&#39; with line linetype 1 linewidth 1 title &quot;CQ-3&quot; &gt;&#39;hcq.dat&#39; with line linetype 3 linewidth 1 title &quot;HCQ-1&quot; &gt;&#39;hcq-3.dat&#39; with line linetype 4 linewidth 1 title &quot;HCQ-3&quot;</span><br><span class="line">set output</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ol><hr><blockquote><p>“版权声明：本文为CSDN博主「MurphyStar」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/MurphyStar/article/details/113679744">https://blog.csdn.net/MurphyStar/article/details/113679744</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;任务&quot;&gt;&lt;a href=&quot;#任务&quot; class=&quot;headerlink&quot; title=&quot;任务&quot;&gt;&lt;/a&gt;任务&lt;/h2&gt;&lt;p&gt;将能量都投射到到两个主成分上显示&lt;/p&gt;
&lt;h2 id=&quot;附录-GROMACS续跑与画图&quot;&gt;&lt;a href=&quot;#附录-GROMACS续跑与画</summary>
      
    
    
    
    
    <category term="gmx" scheme="https://fy-han.github.io.git/tags/gmx/"/>
    
  </entry>
  
  <entry>
    <title>shell脚本意思</title>
    <link href="https://fy-han.github.io.git/blog/2021/11/13/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF-%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88-2021-11-13-shell%E8%84%9A%E6%9C%AC%E6%84%8F%E6%80%9D-2021-11-13-shell%E8%84%9A%E6%9C%AC%E6%84%8F%E6%80%9D/"/>
    <id>https://fy-han.github.io.git/blog/2021/11/13/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF-%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88-2021-11-13-shell%E8%84%9A%E6%9C%AC%E6%84%8F%E6%80%9D-2021-11-13-shell%E8%84%9A%E6%9C%AC%E6%84%8F%E6%80%9D/</id>
    <published>2021-11-13T04:51:28.000Z</published>
    <updated>2021-11-13T05:03:55.453Z</updated>
    
    <content type="html"><![CDATA[<ul><li>$0 当前脚本的执行名字</li><li>$n 当前脚本执行命令的第n个参数值，n = 1..9</li><li>$* 当前脚本执行命令的所有参数，此选项参数可超过9个</li><li>$# 当前脚本执行命令的输入参数个数，例如执行 ./test.sh aa bb cc，则test.sh 里 $# 为 3</li><li>$$ 当前shell的PID（即脚本运行的当前进程号）</li><li>$! 上一个执行指令的PID（后台运行的最后一个进程的进程ID号）</li><li>$- 显示shell使用的当前选项，与set命令功能相同</li><li>$@ 跟$*似，但是可以当作数组用</li><li>$? 上一个执行指令的返回值（显示最后命令的退出状态，0表示没有错误，其他任何值表明有错误），如下所示</li></ul><h3 id="结果输出上一条命令-grep-命令的返回值"><a href="#结果输出上一条命令-grep-命令的返回值" class="headerlink" title="结果输出上一条命令 grep 命令的返回值"></a>结果输出上一条命令 grep 命令的返回值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep xxx a.txt</span><br><span class="line"><span class="built_in">echo</span> $?</span><br></pre></td></tr></table></figure><h3 id="判断打开目录命令是否成功，不成功则输出提醒信息并退出"><a href="#判断打开目录命令是否成功，不成功则输出提醒信息并退出" class="headerlink" title="判断打开目录命令是否成功，不成功则输出提醒信息并退出"></a>判断打开目录命令是否成功，不成功则输出提醒信息并退出</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dir_exe=../cron</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$dir_exe</span></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;cannot change dir to <span class="variable">$dir_exe</span>&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1  </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;$0 当前脚本的执行名字&lt;/li&gt;
&lt;li&gt;$n 当前脚本执行命令的第n个参数值，n = 1..9&lt;/li&gt;
&lt;li&gt;$* 当前脚本执行命令的所有参数，此选项参数可超过9个&lt;/li&gt;
&lt;li&gt;$# 当前脚本执行命令的输入参数个数，例如执行 ./test.sh a</summary>
      
    
    
    
    
    <category term="技术杂谈" scheme="https://fy-han.github.io.git/tags/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>10.30-11.6周报</title>
    <link href="https://fy-han.github.io.git/blog/2021/11/6/2021%E5%91%A8%E6%8A%A5-4%E5%AD%A3%E5%BA%A6-2021-11-6-10-30-11-6%E5%91%A8%E6%8A%A5-2021-11-6-10-30-11-6%E5%91%A8%E6%8A%A5/"/>
    <id>https://fy-han.github.io.git/blog/2021/11/6/2021%E5%91%A8%E6%8A%A5-4%E5%AD%A3%E5%BA%A6-2021-11-6-10-30-11-6%E5%91%A8%E6%8A%A5-2021-11-6-10-30-11-6%E5%91%A8%E6%8A%A5/</id>
    <published>2021-11-06T06:05:28.000Z</published>
    <updated>2021-11-06T06:06:27.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="11-6"><a href="#11-6" class="headerlink" title="11.6"></a>11.6</h2><p>做缝缝补补的善后工作，给此前的文章打补丁。没有这个水平，就最好写中文后翻译成英文，不然真的是折磨自己。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;11-6&quot;&gt;&lt;a href=&quot;#11-6&quot; class=&quot;headerlink&quot; title=&quot;11.6&quot;&gt;&lt;/a&gt;11.6&lt;/h2&gt;&lt;p&gt;做缝缝补补的善后工作，给此前的文章打补丁。没有这个水平，就最好写中文后翻译成英文，不然真的是折磨自己。&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="周报" scheme="https://fy-han.github.io.git/tags/%E5%91%A8%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客无法hexo d进行部署</title>
    <link href="https://fy-han.github.io.git/blog/2021/11/5/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E5%8D%9A%E5%AE%A2-2021-3-10-hexo-github%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98-2021-11-5-hexo%E5%8D%9A%E5%AE%A2%E6%97%A0%E6%B3%95hexo-d%E8%BF%9B%E8%A1%8C%E9%83%A8%E7%BD%B2-2021-11-5-hexo%E5%8D%9A%E5%AE%A2%E6%97%A0%E6%B3%95hexo-d%E8%BF%9B%E8%A1%8C%E9%83%A8%E7%BD%B2/"/>
    <id>https://fy-han.github.io.git/blog/2021/11/5/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E5%8D%9A%E5%AE%A2-2021-3-10-hexo-github%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98-2021-11-5-hexo%E5%8D%9A%E5%AE%A2%E6%97%A0%E6%B3%95hexo-d%E8%BF%9B%E8%A1%8C%E9%83%A8%E7%BD%B2-2021-11-5-hexo%E5%8D%9A%E5%AE%A2%E6%97%A0%E6%B3%95hexo-d%E8%BF%9B%E8%A1%8C%E9%83%A8%E7%BD%B2/</id>
    <published>2021-11-05T13:16:25.000Z</published>
    <updated>2021-11-05T14:13:58.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="执行-hexo-d-部署到-GitHub-上的时候总是卡住解决办法"><a href="#执行-hexo-d-部署到-GitHub-上的时候总是卡住解决办法" class="headerlink" title="执行 hexo d 部署到 GitHub 上的时候总是卡住解决办法"></a><strong><a href="https://blog.51cto.com/u_15176340/2723833">执行 hexo d 部署到 GitHub 上的时候总是卡住解决办法</a></strong></h2><p>1.国内墙对 GitHub 的阻挡影响，导致国内用户在向 GitHub 仓库 pull 或者 push 的时候速度都会受到不同程度的影响。解决办法是 买或者自己搭建个 vpn，然后设置 git 代理。有人说改用手机热点竟然可以了，可以试试，不过我还没有验证其真实性。</p><p>2.让GitHub用https的部署链接（即上图中打＃号的链接），并让git走代理。代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39;git config --global https.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39;</span><br></pre></td></tr></table></figure><p>执行 hexo d 部署到 GitHub 上的时候总是卡住解决办法</p><h2 id="解决github无法连接错误-OpenSSL-SSL-connect-Connection-was-reset-in-connection-to-github-com-443"><a href="#解决github无法连接错误-OpenSSL-SSL-connect-Connection-was-reset-in-connection-to-github-com-443" class="headerlink" title="解决github无法连接错误 OpenSSL SSL_connect: Connection was reset in connection to github.com:443"></a><a href="https://www.cnblogs.com/LandWind/p/github_SSL_connect_error_443.html">解决github无法连接错误 OpenSSL SSL_connect: Connection was reset in connection to github.com:443</a></h2><h3 id="错误描述"><a href="#错误描述" class="headerlink" title="错误描述#"></a>错误描述<a href="https://www.cnblogs.com/LandWind/p/github_SSL_connect_error_443.html#2286060437">#</a></h3><p>OpenSSL SSL_connect: Connection was reset in connection to github.com:443<br>看错误描述就标识ssl连接不到443端口。<br>本机已经挂了小飞机，说明是代理出了问题，所以先检查git的全局配置。</p><h3 id="查看全局配置"><a href="#查看全局配置" class="headerlink" title="查看全局配置#"></a>查看全局配置<a href="https://www.cnblogs.com/LandWind/p/github_SSL_connect_error_443.html#3249025500">#</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Copygit config --global -l</span><br></pre></td></tr></table></figure><p>检查是否有https.proxy及http.proxy项</p><h3 id="设置全局代理设置"><a href="#设置全局代理设置" class="headerlink" title="设置全局代理设置#"></a>设置全局代理设置<a href="https://www.cnblogs.com/LandWind/p/github_SSL_connect_error_443.html#1605978880">#</a></h3><p>示例7890端口是代理软件端口，按个人情况修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Copygit config --global http.proxy 127.0.0.1:7890</span><br><span class="line">git config --global https.proxy 127.0.0.1:7890</span><br></pre></td></tr></table></figure><h3 id="已有设置情况修改代理项"><a href="#已有设置情况修改代理项" class="headerlink" title="已有设置情况修改代理项#"></a>已有设置情况修改代理项<a href="https://www.cnblogs.com/LandWind/p/github_SSL_connect_error_443.html#1399694437">#</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Copygit config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><h2 id="git使用socks5代理提示：Unsupported-proxy-syntax-in-127-0-0-1-1080-qq-27006679的博客-CSDN博客"><a href="#git使用socks5代理提示：Unsupported-proxy-syntax-in-127-0-0-1-1080-qq-27006679的博客-CSDN博客" class="headerlink" title="git使用socks5代理提示：Unsupported proxy syntax in 127.0.0.1:1080_qq_27006679的博客-CSDN博客"></a><a href="https://blog.csdn.net/qq_27006679/article/details/118327505">git使用socks5代理提示：Unsupported proxy syntax in 127.0.0.1:1080_qq_27006679的博客-CSDN博客</a></h2><p>提示说是语法错误：</p><p>打开.gitconfig文件查看代理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[http]</span><br><span class="line">    proxy &#x3D; &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39;</span><br><span class="line">[https]</span><br><span class="line">    proxy &#x3D; &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39;</span><br></pre></td></tr></table></figure><p>去掉前后的单引号，错误消失</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[http]</span><br><span class="line">    proxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">[https]</span><br><span class="line">    proxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br></pre></td></tr></table></figure><h1 id="Clash使用教程-Lawliet’s-blog"><a href="#Clash使用教程-Lawliet’s-blog" class="headerlink" title="Clash使用教程 - Lawliet’s blog "></a><a href="http://zhangshen147.online/post/clash-use">Clash使用教程 - Lawliet’s blog </a></h1><p>2020年9月3日<a href="http://zhangshen147.online/categories/Tech">Tech</a></p><p><code>Clash</code> 是一款用 Go 语言编写的、基于规则的隧道（Tunnel ）程序，它支持多种加密通信协议和跨平台，目前已知 Clash 核心支持的加密协议就有 Vmess、Shadowsocks、Trojan、Snell 等。也就是说，所有运行了这些协议之一，或更多的代理节点（Proxy Node），都能交由 Clash 核心统一管理。</p><p>以下是 Clash 核心的 Github 地址：</p><p><a href="https://github.com/Dreamacro/clash">https://github.com/Dreamacro/clash</a></p><blockquote><p>注：Clash 的跨平台特性实际上得益于 Go 语言自身良好/优秀的可移植性。</p></blockquote><h2 id="Clash-客户端"><a href="#Clash-客户端" class="headerlink" title="Clash 客户端"></a>Clash 客户端</h2><p>之前我一直称呼它为 Clash 核心，但却没有解释为什么叫它“核心”，实际上这是相对于 Clash 客户端而言的。Clash 核心是隧道（Tunnel ）程序，但我们平时所接触的各种 Clash 客户端，其实应该算作更上一层的代理（Proxy）程序，是对 Clash 核心的一种应用，也是基于 Clash 核心的：</p><p>macOS：<a href="https://github.com/yichengchen/clashX">clashX</a></p><p>Windows：<a href="https://github.com/Fndroid/clash_for_windows_pkg">Clash for Windows</a></p><p>Linux：<a href="https://github.com/uiYzzi/ClashR-Pro">ClashR-Pro</a></p><p>Android：<a href="https://github.com/Kr328/ClashForAndroid">ClashForAndroid</a></p><p>本篇文章旨在介绍一些 Clash 中的核心概念，以帮助我们更好地理解和使用 Clash 客户端，但由于本人会同时使用多种客户端，因此就不再用具体的用户接口（User Interface）去描述问题了，尽量贴近原生的配置文件，旨在提供一种通用的方法论。</p><h2 id="机场"><a href="#机场" class="headerlink" title="机场"></a>机场</h2><p>我们在使用 Clash 客户端的时候，往往都要和“机场”一起配合使用。所谓机场，其实是一种形象化的说法，因为原本 SS/SSR 的 logo 就是一个好看的纸飞机图案，而作为 SS/SSR 代理服务的提供商，他们往往拥有不只一台纸飞机（Shadowsocks），因此，“机场”作为一种代号就流传下来了，意在说明停靠了好多纸飞机在上面的意思。</p><p>后来，我们发现 Proxy Node 不只可以是 Shadowsocks 的，还可以是 Vmess 等协议的，但习惯已经养成，懒得改称呼了，所以“机场”这一称呼的含义就得到了延伸，变成了现在所有代理服务提供商的统称。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Clash 是配置驱动的。通过 Clash 客户端，我们可以进行许多操作，以控制系统代理的行为和走向。但是，这些操作的背后，其实都是在读写/操作一些配置文件。换句话说，配置是 Clash 软件的绳命，只有在导入了配置以后，我们的许多操作才能进行，进行的许多操作才有意义。</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>Clash 的配置文件是 <a href="https://docs.cfw.lbyczf.com/contents/configfile.html">yaml</a> 格式的，以 CFW（Clash for Windows）客户端为例，它使用的两个配置文件分别是：</p><ul><li><code>$&#123;Home&#125;/config.yaml</code></li><li><code>$&#123;Home&#125;/profiles/xxxx.yaml</code></li></ul><p>在这两个配置文件中，第一个 <code>config.yaml</code> 文件是很重要的，它控制着 Clash 核心的启动，如果此文件有错，那么 Clash 核心很可能将无法启动，并在界面上报 Could not run Clash core 错误，一般情况下我们不应该，也没必要去修改它。</p><p>而第 2 种位于 <code>$&#123;Home&#125;/profiles/</code> 目录之下的 <code>xxxx.yaml</code> 配置文件，则须由用户自行导入，平时我们接触更多的配置文件其实还是它们，在它们上面进行的配置也比较多。</p><h3 id="导入配置"><a href="#导入配置" class="headerlink" title="导入配置"></a>导入配置</h3><p>profiles 目录下的配置文件，统一由 Clash 生成，并在一般情况下用时间戳（Timestamp）来命名，但是如何导入呢？主要有以下两种方式：</p><ol><li>本地导入。或手动编辑，或直接下载一份配置文件到本地（代理服务提供商提供），然后拖拽导入到 Clash 客户端中即可。</li><li>订阅链接。依旧是由代理服务商提供配置文件，但不一样的是，这次不再直接交给用户，而是维护一个订阅链接交给用户，用户可以通过该链接不断地检查更新，以持续获得最新、最全的配置文件，相当于是“售后保障”了。</li></ol><blockquote><p>注：Profiles 目录下的配置文件可以有多个，当我们这样做了以后，体现在 Clash 客户端界面上的现象就是，在 Profiles 导航菜单下会有多套“配置”供我们切换选择。</p></blockquote><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># HTTP 端口</span><br><span class="line">port: 7890</span><br><span class="line"></span><br><span class="line"># SOCKS5 端口</span><br><span class="line">socks-port: 7891</span><br><span class="line"></span><br><span class="line"># Linux 及 macOS 的 redir 端口</span><br><span class="line"># redir-port: 7892</span><br></pre></td></tr></table></figure><p>默认情况下，Clash 在本地监听了两个端口，分别是 7890 用作 Http/Https 协议的监听/转发端口，和 7891 用作 Socks5 协议的监听/转发端口。不同的协议（利用回环网卡）转发到对应的端口上，然后再经由这两个端口的判断和修改后，从正常的网卡传出数据即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">allow-lan: false</span><br><span class="line"></span><br><span class="line"># 仅适用于设置 allow-lan 为 true 时</span><br><span class="line"></span><br><span class="line"># 1. 绑定所有 IP 地址</span><br><span class="line"># bind-address: &quot;*&quot;</span><br><span class="line"></span><br><span class="line"># 2. 绑定单个 IPv4 地址</span><br><span class="line"># bind-address: &quot;192.168.122.11&quot;</span><br><span class="line"></span><br><span class="line"># 3. 绑定单个 IPv6 地址</span><br><span class="line"># bind-address: &quot;aaaa::a8aa:ff:fe09:57d8&quot;</span><br></pre></td></tr></table></figure><p>是否连局域网也要走代理。一般情况下，我们只是因为要连接🔗的网站走不通了才会使用代理，局域网肯定是能访问的呀，所以一般没必要开（设置为 true）。但是，如果你实在有这个需求的话，可以在将 allow-lan 设置为 true 的前提下，利用下面给出的 3 条设置范例，将你要代理的 local ip 地址设置进去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 设置输出日志的等级 (默认为 info)</span><br><span class="line"># silent &#x2F; info &#x2F; warning &#x2F; error &#x2F; debug</span><br><span class="line">log-level: info</span><br></pre></td></tr></table></figure><p>可以设置 Clash 的日志输出级别，按照注释上的顺序，日志级别依次提高。log-level 设置的级别越高，日志的输出量就越大，越倾向于调试，默认设置为 info。</p><blockquote><p>注：此处的日志，指的是能够在 Dashboard（控制台）界面中被看到的日志，而不是指是否记录某个级别的日志。经过测试发现，无论选择何种日志等级，日志条目都是照常记录在 log 文件里的，它控制的只是输出，是否在 Dashboard 中显示给用户审计。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># RESTful API for clash</span><br><span class="line">external-controller: 127.0.0.1:9090</span><br><span class="line"></span><br><span class="line"># you can put the static web resource (such as clash-dashboard) to a directory, and clash would serve in &#96;$&#123;API&#125;&#x2F;ui&#96;</span><br><span class="line"># input is a relative path to the configuration directory or an absolute path</span><br><span class="line"># external-ui: folder</span><br><span class="line"></span><br><span class="line"># Secret for RESTful API (Optional)</span><br><span class="line"># secret: &quot;&quot;</span><br></pre></td></tr></table></figure><p>除此之外，Clash 提供了一个 RESTful API，帮助我们从外部或本地前端页面进行访问，如有必要，还可以为其设置密码（Secret）等。默认情况下，我们可以通过以下本地回环地址来访问 Dashboard 前端页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:9090&#x2F;ui</span><br></pre></td></tr></table></figure><h3 id="配置生效"><a href="#配置生效" class="headerlink" title="配置生效"></a>配置生效</h3><p>前面介绍了许多 Clash 配置项，但实际上，它们不一定是被需要的。Clash 使用配置文件的方式是这样的：允许 Profiles 目录下的 <code>xxxx.yaml</code> 配置文件不完整，一般只需包含最基本的 <code>proxies、proxy-groups、rules</code> 三个字段即可。</p><p>因为当 Clash 启动以后，只对上面提到的有限个字段（还可能包括 dns、hosts 等）进行替换，导入 Clash 使之生效，其它的内容均不会被替换。否则，由于里面设置的监听端口号等，会导致每次修改/切换配置文件以后，都重新设置系统代理，以及其它软件的代理端口，显然太麻烦了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 1. 代理节点</span><br><span class="line">proxies:</span><br><span class="line">- name: &quot;香港中继Q1 Media (HK)&quot;</span><br><span class="line">  type: vmess</span><br><span class="line">  server: q0-slb.jxsstgj.com</span><br><span class="line">  port: 544</span><br><span class="line">- name: &quot;香港中继Q2 Media (HK)&quot;</span><br><span class="line">  type: vmess</span><br><span class="line">  server: q1-slb.jxsstgj.com</span><br><span class="line">  port: 544</span><br><span class="line"># 2. 代理组策略</span><br><span class="line">proxy-groups:</span><br><span class="line">  - name: Proxy</span><br><span class="line">    type: select</span><br><span class="line">    proxies:</span><br><span class="line">      - &quot;香港中继Q1 Media (HK)&quot;</span><br><span class="line">      - &quot;香港中继Q2 Media (HK)&quot;</span><br><span class="line"># 3. 规则</span><br><span class="line">rules:</span><br><span class="line">  - &#39;MATCH,DIRECT&#39;</span><br></pre></td></tr></table></figure><h3 id="代理模式（Mode）"><a href="#代理模式（Mode）" class="headerlink" title="代理模式（Mode）"></a>代理模式（Mode）</h3><p>使用 Clash 客户端的核心在于它的“代理界面”的设置，在这里，我们主要做以下两件事：</p><ul><li>切换代理模式</li><li>切换节点</li></ul><p>首先我们介绍代理模式，在 Clash 中一共有 3 种代理模式，它们分别是：</p><ul><li>全局（Global）：所有的请求都直接发往代理服务器，进行代理。</li><li>规则（Rule）：所有请求根据配置文件中的“规则”进行过滤、分流。</li><li>直连（Direct）：所有请求不经过中间节点，直接发往目的地（也即不使用代理）。</li></ul><p>“代理模式”选项在 Configuration 中的具体体现是 mode 字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Rule &#x2F; Global &#x2F; Direct (默认为 Rule 模式)</span><br><span class="line">mode: Rule</span><br></pre></td></tr></table></figure><p><strong>代理</strong>和<strong>节点列表</strong>本质上是不冲突的，但切换了不同的工作模式以后，对应的策略组和节点列表会发生变化，这是因为我们为不同的代理模式配置了不同的策略组和节点列表。一般情况下，我们都使用 Rule 作为默认代理模式，因为它支持过滤，自定义程度更高，同时还符合中国人“中庸”的思想，不一棒子打死。</p><h3 id="代理节点（Proxies）"><a href="#代理节点（Proxies）" class="headerlink" title="代理节点（Proxies）"></a>代理节点（Proxies）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 代理节点</span><br><span class="line">proxies:</span><br><span class="line">- name: &quot;香港中继Q1 Media (HK)&quot;</span><br><span class="line">  type: vmess</span><br><span class="line">  server: q0-slb.jxsstgj.com</span><br><span class="line">  port: 544</span><br><span class="line">  cipher: auto</span><br><span class="line">- name: &quot;香港中继Q2 Media (HK)&quot;</span><br><span class="line">  type: vmess</span><br><span class="line">  server: q1-slb.jxsstgj.com</span><br><span class="line">  port: 544</span><br><span class="line">  cipher: auto</span><br></pre></td></tr></table></figure><p>代理节点，实际是最核心的 Clash 配置内容，但往往我们又不需要修改它们，因此只简单说一下即可，里面的 type 指的是加密通信协议类型，port 指的是代理服务器/节点通过哪个端口来监听、转发我们的请求，cipher 指的是加密方式，如 AES、RC4 等，这里配置的 auto 是自动选择的意思。</p><p>如果把配置文件比作代码的话，那么这里的 proxies 就是定义了一系列的节点，在后面的策略组中，我们还会引用这些节点，以实现高级功能。</p><h3 id="策略组（Policy-Group）"><a href="#策略组（Policy-Group）" class="headerlink" title="策略组（Policy Group）"></a>策略组（Policy Group）</h3><p>策略组，按照我的理解，就是规定如何使用节点的方式，当我们配置好不同的策略组以后，Clash 根据不同的策略，分发由规则（Rule）过滤、传递过来的请求，其在规则中，会指定某些流量走哪个策略组。</p><p>策略组有如下特性：</p><ul><li>具有多种不同的<strong>策略类型</strong></li><li>可以包含<strong>节点</strong>和其它<strong>策略组</strong></li><li>服务于<strong>规则</strong></li></ul><p>其中第一个很好理解，使用节点的方式可以有很多种，第二个指的是就像二级指针那样，策略（A）中还可以再引用其它策略（B），而不是只能引用一些定义好了的代理节点，第三个指的是策略的主要作用是给规则（Rule）引用的。</p><p>这里我们主要说说如何添加/制定策略组，在 Surge3 中，可定义的策略类型如下：</p><ul><li>select，手动选择，定义一个节点或策略组列表，让用户手动进行选择。</li><li>url-test，延迟测试，选择延迟较低的代理节点。</li><li>ssid，网络类型，根据网络类型或路由器名称选择节点或策略组。</li><li>fallback，回落类型，按照顺序选择第一个可用的代理节点或策略组。</li></ul><p>这些策略类型在配置文件中的体现，是 type 选项，比如说下面这段配置，就定义了一个名为 PROXY、策略类型为 select，且含有 5 个 item 的节点列表（其中 1 个为策略组 4 个为代理节点）的策略组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 代理节点选择</span><br><span class="line">- name: &quot;PROXY&quot;</span><br><span class="line">  type: select</span><br><span class="line">  proxies:</span><br><span class="line">    - &quot;fallback-auto&quot;</span><br><span class="line">    - &quot;香港中继Q1 Media (HK)&quot;</span><br><span class="line">    - &quot;香港中继Q2 Media (HK)&quot;</span><br><span class="line">    - &quot;香港中继Q3 Media (HK)&quot;</span><br><span class="line">    - &quot;中继香港C1 Media (HK)&quot;</span><br></pre></td></tr></table></figure><p>再比如说有些流量需要走白名单模式，或黑名单模式，那我们就为它们制定一个 Final 策略组，通过在指定时间段内切换 PROXY 或 DIRECT 策略，就可以统一规定这些流量走白名单还是黑名单模式了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 白名单模式 PROXY</span><br><span class="line"># 黑名单模式 DIRECT</span><br><span class="line">- name: &quot;Final&quot;</span><br><span class="line">  type: select</span><br><span class="line">  proxies:</span><br><span class="line">    - &quot;PROXY&quot;</span><br><span class="line">    - &quot;DIRECT&quot;</span><br></pre></td></tr></table></figure><p>还有一些大陆媒体面向港澳台提供的独家/本地化服务，如果我们想使用的话，就为这些流量选择一个位置在港澳台的节点即可，可以看到该节点列表中的绝大多数主机都是位置在港澳台的。但如果我们已经身处港澳台当地的话，就可以选择 DIRECT 来使这些流量直连，以避免延时损失。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 大陆流媒体面向港澳台限定服务</span><br><span class="line">- name: &quot;HKMTMedia&quot;</span><br><span class="line">  type: select</span><br><span class="line">  proxies:</span><br><span class="line">    - &quot;DIRECT&quot;</span><br><span class="line">    - &quot;香港中继Q1 Media (HK)&quot;</span><br><span class="line">    - &quot;香港中继Q2 Media (HK)&quot;</span><br><span class="line">    - &quot;香港中继Q3 Media (HK)&quot;</span><br><span class="line">    - &quot;中继香港C1 Media (HK)&quot;</span><br></pre></td></tr></table></figure><p>但是，上面这些节点都是 select 模式的，没能体现出太多的差异化，其实还有一个特殊的，那就是 fallback-auto，它会以 interval 指定的间隔，判断网络的通畅情况，如果不可用的话，就自动切换到下一个可用的节点，其中顺序以用户书写的为准，主要使用场景是代理节点鱼龙混杂、网络差的情况下，否则就可能永远只使用位于前面的那两三个节点了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 按照用户书写的服务器顺序，在确保服务器可用的情况下，自动选择服务器</span><br><span class="line">- name: &quot;fallback-auto&quot;</span><br><span class="line">  type: fallback</span><br><span class="line">  proxies:</span><br><span class="line">    - &quot;香港中继Q1 Media (HK)&quot;</span><br><span class="line">    - &quot;香港中继Q2 Media (HK)&quot;</span><br><span class="line">    - &quot;香港中继Q3 Media (HK)&quot;</span><br><span class="line">    - &quot;中继香港C1 Media (HK)&quot;</span><br><span class="line">    - &quot;中继香港C2 Media (HK)&quot;</span><br><span class="line">  url: &#39;http:&#x2F;&#x2F;www.gstatic.com&#x2F;generate_204&#39;</span><br><span class="line">  interval: 300</span><br></pre></td></tr></table></figure><h3 id="规则（Rule）"><a href="#规则（Rule）" class="headerlink" title="规则（Rule）"></a>规则（Rule）</h3><p>类似 PAC（Proxy auto-config，代理自动配置）一样，Clash 中“规则”的概念就来源于此，也是通过匹配域名、ip 段等来选择代理路由的，它实际起到的是“过滤”的作用，通过判断所匹配到的域名或 ip 地址，将流量转发到不同的、合适的策略组。一般来说，绝大多数流量最后都会走 PROXY 策略组，因为它又在其它策略组中被大量引用了。</p><p>接下来说说如何制定规则。在 Clash 中，一条代理规则主要由 3 部分组成：</p><ol><li><p>选择应用对象的方式，它可以是：</p><ul><li>域名匹配（DOMAIN）</li><li>域名后缀（DOMAIN-SUFFIX）</li><li>域名关键字（DOMAIN-KEYWORD）</li><li>无类别域间路由（IP-CIDR）</li><li>GeoIP数据库（GEOIP）</li><li><p>全匹配（MATCH）</p><p>无论选择使用哪种方式来指定，它们的目的都是一样的：选择一个或多个应用对象。其中除了 DOMAIN 方式只能指定一台主机外，其它几种方式都是可以同时匹配到多台主机。其中比较特殊的要属 GEOIP 了，它能通过查询相应的数据库，根据地理位置匹配/选择主机。</p></li></ul></li><li><p>具体的选择应用对象的规则。</p></li><li><p>采取的规则，包括直连（DIRECT）、拒绝（REJECT），指定某个要走的策略组，如 PROXY、Apple 等。</p></li></ol><p>按照以上顺序，给出它们的几条规则范例分别为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- DOMAIN,api.viu.now.com,GlobalMedia</span><br><span class="line">- DOMAIN-SUFFIX,byteoversea.com,GlobalMedia</span><br><span class="line">- DOMAIN-KEYWORD,google,PROXY</span><br><span class="line">- IP-CIDR,61.160.200.242&#x2F;32,Hijacking,no-resolve</span><br><span class="line">- GEOIP,CN,DIRECT</span><br><span class="line">- MATCH,Final</span><br></pre></td></tr></table></figure><p>规则最后一行是 <code>MATCH,Final</code>，表示当客户端运行在规则（Rule）模式时，如果匹配到以上的规则，就按照规则中定义的（策略组）路由走，否则走 Final 这个策略组。但实际上，我们前面也看到过 Final 策略组的定义，其背后依旧是依赖于 PROXY 的，因此我们平时在配置时，最应该重视的还是 PROXY 策略组。</p><h3 id="绕过系统代理"><a href="#绕过系统代理" class="headerlink" title="绕过系统代理"></a>绕过系统代理</h3><p>最后，如果你压根不想让某些网站走代理的话，也可以通过在 cfw-bypass 选项下添加 ip 或域名来绕过系统代理，不过该功能只在 Windows 平台下生效，想必是因为 macOS 等平台没有提供现成的 API 所致。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Clash for Windows</span><br><span class="line">cfw-bypass:</span><br><span class="line">  - qq.com</span><br><span class="line">  - music.163.com</span><br><span class="line">  - &#39;*.music.126.net&#39;</span><br><span class="line">  - localhost</span><br><span class="line">  - 127.*</span><br><span class="line">  - 10.*</span><br><span class="line">  - 172.16.*</span><br><span class="line">  - 172.17.*</span><br><span class="line">  - 172.18.*</span><br><span class="line">  - &lt;local&gt;</span><br><span class="line">cfw-latency-timeout: 5000</span><br></pre></td></tr></table></figure><blockquote><p>Reference：</p><p><a href="https://docs.cfw.lbyczf.com/contents/ui/profiles/rules.html">Clash for Windows 文档</a></p><p><a href="https://zh.wikipedia.org/wiki/代理自动配置">维基百科: 代理自动配置</a></p><p><a href="https://zhuangzhuang.cf/2019-03-20/proxygroup/">Surge/Quantumult 策略组</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;执行-hexo-d-部署到-GitHub-上的时候总是卡住解决办法&quot;&gt;&lt;a href=&quot;#执行-hexo-d-部署到-GitHub-上的时候总是卡住解决办法&quot; class=&quot;headerlink&quot; title=&quot;执行 hexo d 部署到 GitHub 上的时候总</summary>
      
    
    
    
    
    <category term="博客建立" scheme="https://fy-han.github.io.git/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%8B/"/>
    
  </entry>
  
  <entry>
    <title>GROMACS MD 速度调整</title>
    <link href="https://fy-han.github.io.git/blog/2021/10/31/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E5%88%86%E5%AD%90%E6%A8%A1%E6%8B%9F-GMX-2021-10-31-GROMACS-MD-%E9%80%9F%E5%BA%A6%E8%B0%83%E6%95%B4/"/>
    <id>https://fy-han.github.io.git/blog/2021/10/31/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E5%88%86%E5%AD%90%E6%A8%A1%E6%8B%9F-GMX-2021-10-31-GROMACS-MD-%E9%80%9F%E5%BA%A6%E8%B0%83%E6%95%B4/</id>
    <published>2021-10-31T15:18:34.000Z</published>
    <updated>2021-11-13T06:34:17.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GROMACS-MD-速度调整"><a href="#GROMACS-MD-速度调整" class="headerlink" title="GROMACS MD 速度调整"></a>GROMACS MD 速度调整</h1><p>根据<a href="http://bbs.keinsci.com/thread-13861-1-4.html">GROMACS (2019.3 GPU版) 并行效率测试及调试思路 - 分子模拟 (Molecular Modeling) - 计算化学公社 (keinsci.com)</a>文章说法，两块显卡相对于一块显卡的提升非常有限。如果装了两块显卡，想有效的利用这两块显卡，最好的办法是每块显卡跑一个独立gmx任务。问题是，这两个独立的gmx会相互干扰么？经过测试，结论是：<strong>cpu核数足够的情况下两块显卡单独运行两个Gromacs任务完全没有影响</strong>。<a href="http://bbs.keinsci.com/thread-13910-1-1.html?tdsourcetag=s_pcqq_aiomsg">JCC,2019</a>的那篇文章中也可以看到，N显卡相对于单显卡的速度几乎就是N倍。</p><p><img src="/blog/2021/10/31/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E5%88%86%E5%AD%90%E6%A8%A1%E6%8B%9F-GMX-2021-10-31-GROMACS-MD-%E9%80%9F%E5%BA%A6%E8%B0%83%E6%95%B4/life\blog\source\_posts\科研学习\分子模拟\GMX\forum.php" alt="img"></p><p>单Rank下，随着openmp threads数量增多，显卡计算NB+BF的速度最终超过了NB+PME，这是因为1080性能略差，这样CPU并行数量上去之后，CPU计算PME的速度最终能够超过GPU计算PME的速度。而多节点运行事实上不划算</p><p>==<strong>进程=火车，线程=车厢</strong></p><ul><li>线程在进程下行进（单纯的车厢无法运行）</li><li>一个进程可以包含多个线程（一辆火车可以有多个车厢）</li><li>不同进程间数据很难共享（一辆火车上的乘客很难换到另外一辆火车，比如站点换乘）</li><li>同一进程下不同线程间数据很易共享（A车厢换到B车厢很容易）</li><li>进程要比线程消耗更多的计算机资源（采用多列火车相比多个车厢更耗资源）</li><li>进程间不会相互影响，一个线程挂掉将导致整个进程挂掉（一列火车不会影响到另外一列火车，但是如果一列火车上中间的一节车厢着火了，将影响到所有车厢）</li><li>进程可以拓展到多机，进程最多适合多核（不同火车可以开在多个轨道上，同一火车的车厢不能在行进的不同的轨道上）</li><li>进程使用的内存地址可以上锁，即一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。（比如火车上的洗手间）－”互斥锁”</li><li>进程使用的内存地址可以限定使用量（比如火车上的餐厅，最多只允许多少人进入，如果满了需要在门口等，等有人出来了才能进去）－“信号量</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GROMACS-MD-速度调整&quot;&gt;&lt;a href=&quot;#GROMACS-MD-速度调整&quot; class=&quot;headerlink&quot; title=&quot;GROMACS MD 速度调整&quot;&gt;&lt;/a&gt;GROMACS MD 速度调整&lt;/h1&gt;&lt;p&gt;根据&lt;a href=&quot;http://</summary>
      
    
    
    
    
    <category term="gmx" scheme="https://fy-han.github.io.git/tags/gmx/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://fy-han.github.io.git/blog/2021/10/25/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF-%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88-2021-10-25-Bash%E6%95%99%E5%AD%A6/"/>
    <id>https://fy-han.github.io.git/blog/2021/10/25/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF-%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88-2021-10-25-Bash%E6%95%99%E5%AD%A6/</id>
    <published>2021-10-25T15:27:48.559Z</published>
    <updated>2021-10-25T15:33:20.816Z</updated>
    
    <content type="html"><![CDATA[<!doctype html><html><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width initial-scale=1"><style type="text/css">html {overflow-x: initial !important;}:root { --bg-color:#ffffff; --text-color:#333333; --select-text-bg-color:#B5D6FC; --select-text-font-color:auto; --monospace:"Lucida Console",Consolas,"Courier",monospace; --title-bar-height:20px; }.mac-os-11 { --title-bar-height:28px; }html { font-size: 14px; background-color: var(--bg-color); color: var(--text-color); font-family: "Helvetica Neue", Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; }body { margin: 0px; padding: 0px; height: auto; inset: 0px; font-size: 1rem; line-height: 1.42857; overflow-x: hidden; background: inherit; tab-size: 4; }iframe { margin: auto; }a.url { word-break: break-all; }a:active, a:hover { outline: 0px; }.in-text-selection, ::selection { text-shadow: none; background: var(--select-text-bg-color); color: var(--select-text-font-color); }#write { margin: 0px auto; height: auto; width: inherit; word-break: normal; overflow-wrap: break-word; position: relative; white-space: normal; overflow-x: visible; padding-top: 36px; }#write.first-line-indent p { text-indent: 2em; }#write.first-line-indent li p, #write.first-line-indent p * { text-indent: 0px; }#write.first-line-indent li { margin-left: 2em; }.for-image #write { padding-left: 8px; padding-right: 8px; }body.typora-export { padding-left: 30px; padding-right: 30px; }.typora-export .footnote-line, .typora-export li, .typora-export p { white-space: pre-wrap; }.typora-export .task-list-item input { pointer-events: none; }@media screen and (max-width: 500px) {  body.typora-export { padding-left: 0px; padding-right: 0px; }  #write { padding-left: 20px; padding-right: 20px; }  .CodeMirror-sizer { margin-left: 0px !important; }  .CodeMirror-gutters { display: none !important; }}#write li > figure:last-child { margin-bottom: 0.5rem; }#write ol, #write ul { position: relative; }img { max-width: 100%; vertical-align: middle; image-orientation: from-image; }button, input, select, textarea { color: inherit; font: inherit; }input[type="checkbox"], input[type="radio"] { line-height: normal; padding: 0px; }*, ::after, ::before { box-sizing: border-box; }#write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p, #write pre { width: inherit; }#write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p { position: relative; }p { line-height: inherit; }h1, h2, h3, h4, h5, h6 { break-after: avoid-page; break-inside: avoid; orphans: 4; }p { orphans: 4; }h1 { font-size: 2rem; }h2 { font-size: 1.8rem; }h3 { font-size: 1.6rem; }h4 { font-size: 1.4rem; }h5 { font-size: 1.2rem; }h6 { font-size: 1rem; }.md-math-block, .md-rawblock, h1, h2, h3, h4, h5, h6, p { margin-top: 1rem; margin-bottom: 1rem; }.hidden { display: none; }.md-blockmeta { color: rgb(204, 204, 204); font-weight: 700; font-style: italic; }a { cursor: pointer; }sup.md-footnote { padding: 2px 4px; background-color: rgba(238, 238, 238, 0.7); color: rgb(85, 85, 85); border-radius: 4px; cursor: pointer; }sup.md-footnote a, sup.md-footnote a:hover { color: inherit; text-transform: inherit; text-decoration: inherit; }#write input[type="checkbox"] { cursor: pointer; width: inherit; height: inherit; }figure { overflow-x: auto; margin: 1.2em 0px; max-width: calc(100% + 16px); padding: 0px; }figure > table { margin: 0px; }tr { break-inside: avoid; break-after: auto; }thead { display: table-header-group; }table { border-collapse: collapse; border-spacing: 0px; width: 100%; overflow: auto; break-inside: auto; text-align: left; }table.md-table td { min-width: 32px; }.CodeMirror-gutters { border-right: 0px; background-color: inherit; }.CodeMirror-linenumber { user-select: none; }.CodeMirror { text-align: left; }.CodeMirror-placeholder { opacity: 0.3; }.CodeMirror pre { padding: 0px 4px; }.CodeMirror-lines { padding: 0px; }div.hr:focus { cursor: none; }#write pre { white-space: pre-wrap; }#write.fences-no-line-wrapping pre { white-space: pre; }#write pre.ty-contain-cm { white-space: normal; }.CodeMirror-gutters { margin-right: 4px; }.md-fences { font-size: 0.9rem; display: block; break-inside: avoid; text-align: left; overflow: visible; white-space: pre; background: inherit; position: relative !important; }.md-fences-adv-panel { width: 100%; margin-top: 10px; text-align: center; padding-top: 0px; padding-bottom: 8px; overflow-x: auto; }#write .md-fences.mock-cm { white-space: pre-wrap; }.md-fences.md-fences-with-lineno { padding-left: 0px; }#write.fences-no-line-wrapping .md-fences.mock-cm { white-space: pre; overflow-x: auto; }.md-fences.mock-cm.md-fences-with-lineno { padding-left: 8px; }.CodeMirror-line, twitterwidget { break-inside: avoid; }.footnotes { opacity: 0.8; font-size: 0.9rem; margin-top: 1em; margin-bottom: 1em; }.footnotes + .footnotes { margin-top: 0px; }.md-reset { margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: top; background: 0px 0px; text-decoration: none; text-shadow: none; float: none; position: static; width: auto; height: auto; white-space: nowrap; cursor: inherit; -webkit-tap-highlight-color: transparent; line-height: normal; font-weight: 400; text-align: left; box-sizing: content-box; direction: ltr; }li div { padding-top: 0px; }blockquote { margin: 1rem 0px; }li .mathjax-block, li p { margin: 0.5rem 0px; }li blockquote { margin: 1rem 0px; }li { margin: 0px; position: relative; }blockquote > :last-child { margin-bottom: 0px; }blockquote > :first-child, li > :first-child { margin-top: 0px; }.footnotes-area { color: rgb(136, 136, 136); margin-top: 0.714rem; padding-bottom: 0.143rem; white-space: normal; }#write .footnote-line { white-space: pre-wrap; }@media print {  body, html { border: 1px solid transparent; height: 99%; break-after: avoid; break-before: avoid; font-variant-ligatures: no-common-ligatures; }  #write { margin-top: 0px; padding-top: 0px; border-color: transparent !important; }  .typora-export * { -webkit-print-color-adjust: exact; }  .typora-export #write { break-after: avoid; }  .typora-export #write::after { height: 0px; }  .is-mac table { break-inside: avoid; }  .typora-export-show-outline .typora-export-sidebar { display: none; }}.footnote-line { margin-top: 0.714em; font-size: 0.7em; }a img, img a { cursor: pointer; }pre.md-meta-block { font-size: 0.8rem; min-height: 0.8rem; white-space: pre-wrap; background: rgb(204, 204, 204); display: block; overflow-x: hidden; }p > .md-image:only-child:not(.md-img-error) img, p > img:only-child { display: block; margin: auto; }#write.first-line-indent p > .md-image:only-child:not(.md-img-error) img { left: -2em; position: relative; }p > .md-image:only-child { display: inline-block; width: 100%; }#write .MathJax_Display { margin: 0.8em 0px 0px; }.md-math-block { width: 100%; }.md-math-block:not(:empty)::after { display: none; }.MathJax_ref { fill: currentcolor; }[contenteditable="true"]:active, [contenteditable="true"]:focus, [contenteditable="false"]:active, [contenteditable="false"]:focus { outline: 0px; box-shadow: none; }.md-task-list-item { position: relative; list-style-type: none; }.task-list-item.md-task-list-item { padding-left: 0px; }.md-task-list-item > input { position: absolute; top: 0px; left: 0px; margin-left: -1.2em; margin-top: calc(1em - 10px); border: none; }.math { font-size: 1rem; }.md-toc { min-height: 3.58rem; position: relative; font-size: 0.9rem; border-radius: 10px; }.md-toc-content { position: relative; margin-left: 0px; }.md-toc-content::after, .md-toc::after { display: none; }.md-toc-item { display: block; color: rgb(65, 131, 196); }.md-toc-item a { text-decoration: none; }.md-toc-inner:hover { text-decoration: underline; }.md-toc-inner { display: inline-block; cursor: pointer; }.md-toc-h1 .md-toc-inner { margin-left: 0px; font-weight: 700; }.md-toc-h2 .md-toc-inner { margin-left: 2em; }.md-toc-h3 .md-toc-inner { margin-left: 4em; }.md-toc-h4 .md-toc-inner { margin-left: 6em; }.md-toc-h5 .md-toc-inner { margin-left: 8em; }.md-toc-h6 .md-toc-inner { margin-left: 10em; }@media screen and (max-width: 48em) {  .md-toc-h3 .md-toc-inner { margin-left: 3.5em; }  .md-toc-h4 .md-toc-inner { margin-left: 5em; }  .md-toc-h5 .md-toc-inner { margin-left: 6.5em; }  .md-toc-h6 .md-toc-inner { margin-left: 8em; }}a.md-toc-inner { font-size: inherit; font-style: inherit; font-weight: inherit; line-height: inherit; }.footnote-line a:not(.reversefootnote) { color: inherit; }.md-attr { display: none; }.md-fn-count::after { content: "."; }code, pre, samp, tt { font-family: var(--monospace); }kbd { margin: 0px 0.1em; padding: 0.1em 0.6em; font-size: 0.8em; color: rgb(36, 39, 41); background: rgb(255, 255, 255); border: 1px solid rgb(173, 179, 185); border-radius: 3px; box-shadow: rgba(12, 13, 14, 0.2) 0px 1px 0px, rgb(255, 255, 255) 0px 0px 0px 2px inset; white-space: nowrap; vertical-align: middle; }.md-comment { color: rgb(162, 127, 3); opacity: 0.8; font-family: var(--monospace); }code { text-align: left; vertical-align: initial; }a.md-print-anchor { white-space: pre !important; border-width: initial !important; border-style: none !important; border-color: initial !important; display: inline-block !important; position: absolute !important; width: 1px !important; right: 0px !important; outline: 0px !important; background: 0px 0px !important; text-decoration: initial !important; text-shadow: initial !important; }.os-windows.monocolor-emoji .md-emoji { font-family: "Segoe UI Symbol", sans-serif; }.md-diagram-panel > svg { max-width: 100%; }[lang="flow"] svg, [lang="mermaid"] svg { max-width: 100%; height: auto; }[lang="mermaid"] .node text { font-size: 1rem; }table tr th { border-bottom: 0px; }video { max-width: 100%; display: block; margin: 0px auto; }iframe { max-width: 100%; width: 100%; border: none; }.highlight td, .highlight tr { border: 0px; }mark { background: rgb(255, 255, 0); color: rgb(0, 0, 0); }.md-html-inline .md-plain, .md-html-inline strong, mark .md-inline-math, mark strong { color: inherit; }.md-expand mark .md-meta { opacity: 0.3 !important; }mark .md-meta { color: rgb(0, 0, 0); }@media print {  .typora-export h1, .typora-export h2, .typora-export h3, .typora-export h4, .typora-export h5, .typora-export h6 { break-inside: avoid; }}.md-diagram-panel .messageText { stroke: none !important; }.md-diagram-panel .start-state { fill: var(--node-fill); }.md-diagram-panel .edgeLabel rect { opacity: 1 !important; }.md-fences.md-fences-math { font-size: 1em; }.md-fences-advanced:not(.md-focus) { padding: 0px; white-space: nowrap; border: 0px; }.md-fences-advanced:not(.md-focus) { background: inherit; }.typora-export-show-outline .typora-export-content { max-width: 1440px; margin: auto; display: flex; flex-direction: row; }.typora-export-sidebar { width: 300px; font-size: 0.8rem; margin-top: 80px; margin-right: 18px; }.typora-export-show-outline #write { --webkit-flex:2; flex: 2 1 0%; }.typora-export-sidebar .outline-content { position: fixed; top: 0px; max-height: 100%; overflow: hidden auto; padding-bottom: 30px; padding-top: 60px; width: 300px; }@media screen and (max-width: 1024px) {  .typora-export-sidebar, .typora-export-sidebar .outline-content { width: 240px; }}@media screen and (max-width: 800px) {  .typora-export-sidebar { display: none; }}.outline-content li, .outline-content ul { margin-left: 0px; margin-right: 0px; padding-left: 0px; padding-right: 0px; list-style: none; }.outline-content ul { margin-top: 0px; margin-bottom: 0px; }.outline-content strong { font-weight: 400; }.outline-expander { width: 1rem; height: 1.42857rem; position: relative; display: table-cell; vertical-align: middle; cursor: pointer; padding-left: 4px; }.outline-expander::before { content: ""; position: relative; font-family: Ionicons; display: inline-block; font-size: 8px; vertical-align: middle; }.outline-item { padding-top: 3px; padding-bottom: 3px; cursor: pointer; }.outline-expander:hover::before { content: ""; }.outline-h1 > .outline-item { padding-left: 0px; }.outline-h2 > .outline-item { padding-left: 1em; }.outline-h3 > .outline-item { padding-left: 2em; }.outline-h4 > .outline-item { padding-left: 3em; }.outline-h5 > .outline-item { padding-left: 4em; }.outline-h6 > .outline-item { padding-left: 5em; }.outline-label { cursor: pointer; display: table-cell; vertical-align: middle; text-decoration: none; color: inherit; }.outline-label:hover { text-decoration: underline; }.outline-item:hover { border-color: rgb(245, 245, 245); background-color: var(--item-hover-bg-color); }.outline-item:hover { margin-left: -28px; margin-right: -28px; border-left: 28px solid transparent; border-right: 28px solid transparent; }.outline-item-single .outline-expander::before, .outline-item-single .outline-expander:hover::before { display: none; }.outline-item-open > .outline-item > .outline-expander::before { content: ""; }.outline-children { display: none; }.info-panel-tab-wrapper { display: none; }.outline-item-open > .outline-children { display: block; }.typora-export .outline-item { padding-top: 1px; padding-bottom: 1px; }.typora-export .outline-item:hover { margin-right: -8px; border-right: 8px solid transparent; }.typora-export .outline-expander::before { content: "+"; font-family: inherit; top: -1px; }.typora-export .outline-expander:hover::before, .typora-export .outline-item-open > .outline-item > .outline-expander::before { content: "−"; }.typora-export-collapse-outline .outline-children { display: none; }.typora-export-collapse-outline .outline-item-open > .outline-children, .typora-export-no-collapse-outline .outline-children { display: block; }.typora-export-no-collapse-outline .outline-expander::before { content: "" !important; }.typora-export-show-outline .outline-item-active > .outline-item .outline-label { font-weight: 700; }.md-inline-math-container mjx-container { zoom: 0.95; }/* ******************** *//*这篇样式基于知乎大佬LAN DU的样式，原文知乎链接：https://zhuanlan.zhihu.com/p/158767474GitHub链接：https://github.com/du33169/typora-theme-essay_cn主要改动：- 适配LaTeX的字体。选用像LaTeX的字体是装“哔”的重要手段。- 更改标题、目录和大纲的编号样式。改成1. ，1.1 ， 1.1.1 ，……这样的编号更有一种浓厚的论文感觉。- 二级及以下标题全部靠左，适应文章样式。后面加上大空白，适配LaTeX样式适用于小论文、实验报告等对格式要求较松的情况，在不写代码的前提下装“哔”*//* ******************** *//*导入字体*//*这里是主要的西文字体 LM Roman 10*//*这里是代码块字体*//*这里是中文字体，我们导入了思源宋体、宋体。*/ /*按理说宋体就够了，但是Typora宋体显示效果感人，暂时换成思源宋体*//*  */body{  /* border:1px solid bxlack; for debug */  padding:0 !important;  margin:0 !important;  line-height: 1.85rem;/*行距*/}/* 正文区基本属性，参照wordTeX模板设置字体大小*/#write { font-family:'LM Roman 10',"Times New Roman",Arial, "Source Han Serif", simsun , sans-serif;  font-size:11pt; max-width: 21cm; /*A4标准宽度*/ border:1px solid #CCC ; /* 添加一个淡灰色的边框 */}/*页边距处理，模仿标准word*/@media screen{  #write{     padding:2.54cm 3.18cm;   }}@media print {  @page{       size: A4;      margin: 2.54cm 3.18cm 2.54cm 3.18cm; /* 页边距 */  }}#write p{text-align:left;}h1,h2,h3,h4,h5,h6 {font-weight:bold;  page-break-after:avoid !important;}/*basic样式采用一般的引言，具有左边框、左缩进*/blockquote{font-family:仿宋;border-left:3px solid grey;padding-left:10px;font-size: 11pt;color: grey;}/*border-width: 0.5pt 0;border-style:solid;这一行本来使用了上下边框*//* 标题属性 */h1 {font-family:'LM Roman 10',simsun;text-align:center;font-size:16pt;}h2 {font-family:'LM Roman 10', 黑体; font-size:14pt;}h3 {font-family:'LM Roman 10', 黑体; font-size:12pt;}h4 {font-family:'LM Roman 10', 黑体; font-size:11pt;}h5 {font-family:'LM Roman 10', 黑体; font-size:11pt;}/* 目录标题属性 */.md-toc-h2 {font-family:'LM Roman 10',simsun;}.md-toc-h3 {font-family:'LM Roman 10',simsun;}.md-toc-h4 {font-family:'LM Roman 10',simsun;}/* 三线表 */#write table{border-top: 1.5pt solid;border-bottom: 1.5pt solid;font-family:"Source Han Serif";font-size:9pt;text-align:center;  page-break-inside:avoid;}#write table td{padding:7px;}#write table tr{padding:7px;}#write thead{border-bottom: 0.75pt solid;font-family:黑体;font-size:9pt;}img{  page-break-inside:avoid;}/*行内代码*/p code, li code {color: rgb(60, 112, 198);background-color:#fefefe;font-family:'LM Mono 10', 'LM Roman 10','Times New Roman',Arial,'Source Han Serif',simsun,sans-serif;box-sizing: border-box; /*border: 1px #ced8e4 solid; */border-right: 0px;margin:  0 2px 0 2px ;padding: 0 2px 0 2px;border-radius: 2px 2px 2px 2px ; /**/ box-shadow: 0 0 1px 1px #c8d3df;  }/*下面是自动编号，初始化计数器。使用多级编号，编号后加空格模仿LaTeX *//* 首先全局进行一次reset，这样即使不添加h1标题也可以使用较低级别的标题 */#write{  counter-reset: h2 0 h3 0 h4 0 h5 0 h6 0}#write h1 {  counter-reset: h2}h2 {  counter-reset: h3}h3 {  counter-reset: h4}h4 {  counter-reset: h5}h5 {  counter-reset: h6}/** put counter result into headings */#write h2:before {  counter-increment: h2;  content: counter(h2);  margin-right: 2rem;}#write h3:before,h3.md-focus.md-heading:before /** override the default style for focused headings */ {  counter-increment: h3;  content: counter(h2) "." counter(h3);  margin-right: 2rem;}#write h4:before,h4.md-focus.md-heading:before {  counter-increment: h4;  content: counter(h2) "." counter(h3) "." counter(h4);  margin-right: 2rem;}#write h5:before,h5.md-focus.md-heading:before {  counter-increment: h5;  content: counter(h2) "." counter(h3) "." counter(h4) "." counter(h5);  margin-right: 2rem;}/*目录*/.md-toc-content{margin-left: 2em;counter-reset: toc-h2 toc-h3 toc-h4 ;/*修复缺失上级标题时无法递增*/page-break-after: always;}.md-toc-inner{margin-left:0 !important;color:black !important;}.md-toc-item{color:black !important;font-size: 11pt;font-family: 'LM Roman 10',"Times New Roman",Arial, "Source Han Serif", simsun , sans-serif; }/* 目录标题 */.md-toc-content .md-toc-h1 {/*  display:none;*/counter-reset: toc-h2;}.md-toc-content .md-toc-h2 {counter-reset: toc-h3;}.md-toc-content .md-toc-h3 {counter-reset: toc-h4;}.md-toc-content .md-toc-h4 {counter-reset: toc-h5;} .md-toc-content .md-toc-h5 {counter-reset: toc-h6;} .md-toc-content .md-toc-h2:before {counter-increment: toc-h2;content: counter(toc-h2);margin-right: 1rem;}.md-toc-content .md-toc-h3:before {counter-increment: toc-h3;content: counter(toc-h2) "." counter(toc-h3);margin-left: 1.5rem;margin-right: 0.5rem;}.md-toc-content .md-toc-h4:before {counter-increment: toc-h4;content: counter(toc-h2) "." counter(toc-h3) "." counter(toc-h4);margin-left: 3.5rem;margin-right: 0.5rem;}.md-toc-content .md-toc-h5:before {counter-increment: toc-h5;content: counter(toc-h2) "." counter(toc-h3) "." counter(toc-h4) "." counter(toc-h5);margin-left: 5.5rem;margin-right: 0.5rem;}/* 大纲标题 */.sidebar-content .outline-h1 {counter-reset: outline-h2;}.sidebar-content .outline-h2 {counter-reset: outline-h3;}.sidebar-content .outline-h3 {counter-reset: outline-h4;}.sidebar-content .outline-h4 {counter-reset: outline-h5;}.sidebar-content .outline-h5 {counter-reset: outline-h6;} .sidebar-content .outline-h2 .outline-label:before {counter-increment: outline-h2;content: counter(outline-h2) " ";}.sidebar-content .outline-h3 .outline-label:before {counter-increment: outline-h3;content: counter(outline-h2) "." counter(outline-h3) "  ";}.sidebar-content .outline-h4 .outline-label:before {counter-increment: outline-h4;content: counter(outline-h2) "." counter(outline-h3) "." counter(outline-h4) "  ";}.sidebar-content .outline-h5 .outline-label:before {counter-increment: outline-h5;content: counter(outline-h2) "." counter(outline-h3) "." counter(outline-h4) "." counter(outline-h5) "  ";}/** override the default style for focused headings */#write>h3.md-focus:before,#write>h4.md-focus:before,#write>h5.md-focus:before,#write>h6.md-focus:before,h3.md-focus:before,h4.md-focus:before,h5.md-focus:before,h6.md-focus:before {  color: inherit;  border: inherit;  border-radius: inherit;  position: inherit;  left:initial;  float: none;  top:initial;  font-size: inherit;  padding-left: inherit;  padding-right: inherit;  vertical-align: inherit;  font-weight: inherit;  line-height: inherit;}</style><title>草稿</title></head><body class="typora-export os-windows"><div class="typora-export-content"><div id="write" class=" first-line-indent"><h1 id="bash教学"><span>Bash教学</span></h1><center> Fengyang Han</center><p><strong><span>Gitbash</span></strong><span>:提供了win下bash的方法</span></p><h2 id="命令"><span>命令</span></h2><p><span>可以使用通配符，类似正则表达。并且可以使用</span><code>|</code><span>管道符号，将命令组合起来</span></p><h3 id="整体命令"><span>整体命令</span></h3><h4 id="ls"><span>ls</span></h4><p><code>ls -a</code><span>显示全部文件</span><span></span><code>ls -l</code><span>列表显示文件</span><span></span><code>ls -la</code><span>列表显示全部文件</span></p><p><code>ls a*</code><span>显示所有 a*相关文件</span></p><h4 id="man"><span>man</span></h4><p><span>manual 操作手册命令 </span><code>man ls</code></p><h4 id="help"><span>help</span></h4><p><span>帮助命令 </span><code>--help</code></p><h3 id="路径命令"><span>路径命令</span></h3><p><span>rmdir：移除路径</span><span></span><span> rm -r 递归删除</span><mark><span>不要轻易使用rm -rf</span></mark><span></span></p><h4 id="文件"><span>文件</span></h4><p><span>cat: 文件内容查看</span><span></span><span>touch：创建文件</span></p><ul><li><span>head</span><span></span><span>和  tail    -n [num]</span></li></ul><p><span>grep: 检索命令</span></p><p>&nbsp;</p><p>&nbsp;</p></div></div></body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width initial-scale=1&quot;&gt;

&lt;style type=&quot;text/c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>装gromacs有gcc问题</title>
    <link href="https://fy-han.github.io.git/blog/2021/10/25/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF-%E9%85%8D%E7%BD%AE%E7%94%B5%E8%84%91-2021-10-25-%E8%A3%85gromacs%E6%9C%89gcc%E9%97%AE%E9%A2%98/"/>
    <id>https://fy-han.github.io.git/blog/2021/10/25/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF-%E9%85%8D%E7%BD%AE%E7%94%B5%E8%84%91-2021-10-25-%E8%A3%85gromacs%E6%9C%89gcc%E9%97%AE%E9%A2%98/</id>
    <published>2021-10-25T00:09:40.000Z</published>
    <updated>2021-11-13T06:32:32.381Z</updated>
    
    <content type="html"><![CDATA[<p>gromacs装的时候发现gcc版本太老（很可能不是这个问题）报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Target &quot;cmTC_ac7df&quot; requires the language dialect &quot;CXX17&quot; , but CMake does</span><br><span class="line">  not know the compile flags to use to enable it.</span><br></pre></td></tr></table></figure><p>检索到相关问题</p><p><img src="/blog/2021/10/25/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF-%E9%85%8D%E7%BD%AE%E7%94%B5%E8%84%91-2021-10-25-%E8%A3%85gromacs%E6%9C%89gcc%E9%97%AE%E9%A2%98/tmpEBEE.png" alt="tmpEBEE"></p><p>于是更新gcc9.4.0，但gcc安装包装在了/sob/下后以为没用就删除了，导致配置环境变量.bashrc时找不到对应文件路径以指定PATH和动态链接库。师兄根据报错装了相关的补充包，并重新编译。</p><p>==<strong>编译使用make -j36 install（最多有40个CPU核），提高编译速度，并重新装在/opt/中</strong>==</p><p><strong>另一台89机器的环境变量配置</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### set gcc</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/opt/gcc-6.5.0/bin:<span class="variable">$&#123;PATH&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="string">&quot;opt/gcc-6.5.0/lib64:<span class="variable">$&#123;LD_LIBRARY_PATH&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><p>对应的gcc文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@Server-P100 hfy]# which gcc</span><br><span class="line">/usr/bin/gcc</span><br><span class="line">(base) [root@Server-P100 hfy]# whereis gcc</span><br><span class="line">gcc: /usr/bin/gcc /usr/lib/gcc /usr/libexec/gcc /opt/gcc-6.5.0/bin/gcc /usr/share/man/man1/gcc.1.gz /usr/share/info/gcc.info.gz</span><br></pre></td></tr></table></figure><p>但是在120机器对应找不到，反而在local文件夹下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hfy@server-p100-sioc ~]$ which gcc</span><br><span class="line">/usr/local/bin/gcc</span><br><span class="line">[hfy@server-p100-sioc ~]$ whereis gcc</span><br><span class="line">gcc: /usr/bin/gcc /usr/lib/gcc /usr/local/bin/gcc /usr/local/lib/gcc /usr/libexec/gcc /usr/share/man/man1/gcc.1.gz</span><br></pre></td></tr></table></figure><p>于是试图通过使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name xxx 2&amp;&gt;1 | grep -v &quot;Permission denied&quot;</span><br></pre></td></tr></table></figure><p> 比对检索。最终找到含有类似文件的两个路径，并继续设置环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### set gcc</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/usr/local/bin/:<span class="variable">$&#123;PATH&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="string">&quot;/usr/local/gcc-9.4.0/build/x86_64-pc-linux-gnu/:<span class="variable">$&#123;LD_LIBRARY_PATH&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><p>随后发现动态链接库未更新，运行gmx命令报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[hfy@server-p100-sioc ~]$ gmx</span><br><span class="line">gmx: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.21&#x27; not found (required by gmx)</span><br><span class="line">gmx: /lib64/libstdc++.so.6: version `CXXABI_1.3.9&#x27; not found (required by gmx)</span><br><span class="line">gmx: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.20&#x27; not found (required by /usr/local/gromacs-2021.3/build/lib/libgromacs.so.6)</span><br><span class="line">gmx: /lib64/libstdc++.so.6: version `CXXABI_1.3.8&#x27; not found (required by /usr/local/gromacs-2021.3/build/lib/libgromacs.so.6)</span><br><span class="line">gmx: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.22&#x27; not found (required by /usr/local/gromacs-2021.3/build/lib/libgromacs.so.6)</span><br><span class="line">gmx: /lib64/libstdc++.so.6: version `CXXABI_1.3.9&#x27; not found (required by /usr/local/gromacs-2021.3/build/lib/libgromacs.so.6)</span><br><span class="line">gmx: /lib64/libstdc++.so.6: version `CXXABI_1.3.11&#x27; not found (required by /usr/local/gromacs-2021.3/build/lib/libgromacs.so.6)</span><br><span class="line">gmx: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.21&#x27; not found (required by /usr/local/gromacs-2021.3/build/lib/libgromacs.so.6)</span><br></pre></td></tr></table></figure><p>根据教程<a href="https://itbilu.com/linux/management/NymXRUieg.html">解决类似 /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.21’ not found 的问题 - IT笔录 (itbilu.com)</a>更新库。</p><p>==<strong>完成gromacs安装</strong>==</p><p>但为了装双精度版本，我把<code>gromacs/build</code>文件夹删了……以为用完了，要重新安装，结果导致gromacs没有关键对应的GMXRC文件。需要重新安装。</p><p>重新安装中指定了<code>/usr/bin/gcc</code> 作为C_compiler，但是报错</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[100%] Building CXX object src/programs/CMakeFiles/gmx.dir/legacymodules.cpp.o</span><br><span class="line">[100%] Building CXX object src/programs/CMakeFiles/gmx.dir/gmx.cpp.o</span><br><span class="line">[100%] Building CXX object share/template/CMakeFiles/template.dir/template.cpp.o</span><br><span class="line">[100%] Linking CXX executable ../../bin/gmx</span><br><span class="line">../../lib/libgromacs.so.3.5.0: undefined reference to `gmx::formatString(char const*, ...)<span class="string">&#x27;</span></span><br><span class="line"><span class="string">../../lib/libgromacs.so.3.5.0: undefined reference to `canDetectGpus(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*)&#x27;</span></span><br><span class="line">collect2: error: ld returned 1 <span class="built_in">exit</span> status</span><br><span class="line">make[2]: *** [bin/gmx] Error 1</span><br><span class="line">make[1]: *** [src/programs/CMakeFiles/gmx.dir/all] Error 2</span><br><span class="line">make[1]: *** Waiting <span class="keyword">for</span> unfinished <span class="built_in">jobs</span>....</span><br><span class="line">[100%] Linking CXX executable ../../bin/template</span><br><span class="line">../../lib/libgromacs.so.3.5.0: undefined reference to `gmx::formatString(char const*, ...)<span class="string">&#x27;</span></span><br><span class="line"><span class="string">../../lib/libgromacs.so.3.5.0: undefined reference to `canDetectGpus(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*)&#x27;</span></span><br><span class="line">collect2: error: ld returned 1 <span class="built_in">exit</span> status</span><br><span class="line">make[2]: *** [bin/template] Error 1</span><br><span class="line">make[1]: *** [share/template/CMakeFiles/template.dir/all] Error 2</span><br><span class="line">make: *** [all] Error 2</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake3 .. -DCMAKE_INSTALL_PREFIX=/opt/gmx2018.8 -DCMAKE_C_COMPILER=<span class="string">&#x27;/usr/bin/gcc&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="最终解决办法，进行GCC版本管理：Centos6安装gcc4-8及以上版本"><a href="#最终解决办法，进行GCC版本管理：Centos6安装gcc4-8及以上版本" class="headerlink" title="最终解决办法，进行GCC版本管理：Centos6安装gcc4.8及以上版本"></a><a href="https://www.cnblogs.com/52fhy/p/12547521.html">最终解决办法，进行GCC版本管理：Centos6安装gcc4.8及以上版本</a></h3><p>由于gcc编译起来真的是非常非常的慢，而且特别耗资源，故使用<code>devtoolset</code>这个工具，几分钟就搞定了gcc版本升级的问题。具体操作方法见文章。</p><p>使用中，在root权限下指定了gcc版本后，在user权限下gcc版本居然是不一样的。</p><p><img src="/blog/2021/10/25/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF-%E9%85%8D%E7%BD%AE%E7%94%B5%E8%84%91-2021-10-25-%E8%A3%85gromacs%E6%9C%89gcc%E9%97%AE%E9%A2%98/tmp221E.png" alt="tmp221E"></p><p>最终通过使用gcc.7版本，完成安装。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;gromacs装的时候发现gcc版本太老（很可能不是这个问题）报错&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;</summary>
      
    
    
    
    
    <category term="gmx" scheme="https://fy-han.github.io.git/tags/gmx/"/>
    
  </entry>
  
  <entry>
    <title>gmx溶剂化跑md</title>
    <link href="https://fy-han.github.io.git/blog/2021/10/22/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E5%88%86%E5%AD%90%E6%A8%A1%E6%8B%9F-GMX-2021-10-22-gmx%E6%BA%B6%E5%89%82%E5%8C%96%E8%B7%91md/"/>
    <id>https://fy-han.github.io.git/blog/2021/10/22/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E5%88%86%E5%AD%90%E6%A8%A1%E6%8B%9F-GMX-2021-10-22-gmx%E6%BA%B6%E5%89%82%E5%8C%96%E8%B7%91md/</id>
    <published>2021-10-22T00:47:41.000Z</published>
    <updated>2021-11-05T13:19:53.717Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通过md跑频率"><a href="#通过md跑频率" class="headerlink" title="通过md跑频率"></a>通过md跑频率</h2><ol><li><p>在Charmm-GUI上选择solution builder，然后一路确认下去，都给你完善好了溶剂盒子啥的，直接就可以在下载的文件里找到gromacs-Readme</p><ul><li><p>gpu命令<br>  不太懂，用gpu跑，<br>  -nt 32 跑了5486核时，一天能跑62ns，实际跑了171s<br>  -nt 8 则跑了2360核时，一天能跑36.5ns，实际跑了295s<br>  -ntmpi 2 -ntomp 4 跑了3138核时，一天能跑27.5ns,实际跑了392s<br>  -gpu_id 123 利用了三个核，非常快，跑了2200核时，一天能跑176.7ns，实际跑了61s，因为gpu_id 0用于显示</p><p>  一个md任务跑了2700s，45min，3/4hrs，跑了10ns</p></li><li><p>跑长时md用-gpu_id 123，220ns一天，不过根据戚老师说法，这个比较浪费。<br>不过根据这篇文章</p></li></ul></li></ol><p>使用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;通过md跑频率&quot;&gt;&lt;a href=&quot;#通过md跑频率&quot; class=&quot;headerlink&quot; title=&quot;通过md跑频率&quot;&gt;&lt;/a&gt;通过md跑频率&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在Charmm-GUI上选择solution builder，然后一路确认下去，都</summary>
      
    
    
    
    
    <category term="gmx" scheme="https://fy-han.github.io.git/tags/gmx/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法学习大全</title>
    <link href="https://fy-han.github.io.git/blog/2021/9/23/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF-%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88-2021-9-23-markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E5%A4%A7%E5%85%A8/"/>
    <id>https://fy-han.github.io.git/blog/2021/9/23/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF-%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88-2021-9-23-markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E5%A4%A7%E5%85%A8/</id>
    <published>2021-09-22T16:03:50.000Z</published>
    <updated>2021-09-23T04:13:07.720Z</updated>
    
    <content type="html"><![CDATA[<p><strong>说明：</strong><br>markdown编译器各平台支持性不同</p><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-1-设计理念"><a href="#1-1-设计理念" class="headerlink" title="1.1 设计理念"></a>1.1 设计理念</h3><ul><li>markdown易于阅读，完全由文本和标点符号组成，由纯文本形式发布，不包含标记标签和格式化指令</li></ul><h3 id="1-2-内联HTML语法"><a href="#1-2-内联HTML语法" class="headerlink" title="1.2 内联HTML语法"></a>1.2 内联HTML语法</h3><ul><li>markdown没有的标签可以使用html，如html的<a>代替markdown连接语法</a></li><li>&lt;与&amp;符号在HTML中需要转义</li></ul><h2 id="二、语法"><a href="#二、语法" class="headerlink" title="二、语法"></a>二、语法</h2><h3 id="2-1-注释"><a href="#2-1-注释" class="headerlink" title="2.1 注释"></a>2.1 注释</h3><ul><li><strong>代码</strong></li></ul><p>用ctrl+shift+`，开启代码块;或者typora本身会自动识别html语法;或者ctrl+shift+K</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#x27;display:none&#x27;</span>&gt;</span></span>这里是注释<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li></li><li><p><strong>html注释</strong></p></li></ul><p>html语法，快捷键command+/</p><p>\<!--注释不显示--></p><p>\<!--不显示的多段注释--></p><ul><li><strong>hack方法</strong></li></ul><p>语义化比较差</p><blockquote id="fn__^"><sup>_^</sup>. #(注释)<a href="#reffn__^" title="Jump back to footnote [_^] in the text."> &#8617;</a></blockquote><p><a href="#(注释)">//</a>:&lt;&gt;(注释)</p><p>[comment]:&lt;&gt;(注释)</p><h3 id="2-2-分级前缀与文本格式"><a href="#2-2-分级前缀与文本格式" class="headerlink" title="2.2 分级前缀与文本格式"></a>2.2 分级前缀与文本格式</h3><ul><li>分级标题 加# 或者ctrl+数字级别</li><li>任务列表   </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 文本 </span><br></pre></td></tr></table></figure><p><strong>效果为：</strong></p><ul><li><p>[ ] 文本</p></li><li><p>文本对齐</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span>中心对齐<span class="xml"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span>to the left<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span>to the right<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>字体效果</li></ul><p>删除线：两边加~</p><p>下划线：两边加++</p><p>背景高亮：两边加==</p><p>==高亮==</p><h3 id="2-3-链接与注脚"><a href="#2-3-链接与注脚" class="headerlink" title="2.3 链接与注脚"></a>2.3 链接与注脚</h3><ul><li>超链接：选中文本后ctrl+K，后面补上链接，可再加“html中会出现的悬停标题”，如 <a href="http://fy-han.github.io/">我的博客</a></li><li>前后的引文链接：用[ ]把内容括起来，然后后面跟数字如<a href="https://www.google.com" title="谷歌">1</a> ：我常用的<a href="https://www.google.com" title="谷歌">Google</a></li><li>用[^1],即可，文末补引用。丰阳说多读sci论文<sup><a href="#fn_1" id="reffn_1">1</a></sup>,能增长知识。</li></ul><font face="黑体">黑体</font><font face="微软雅黑">微软雅黑</font><p>[TOC]</p><h3 id="2-4-余下内容"><a href="#2-4-余下内容" class="headerlink" title="2.4 余下内容"></a>2.4 余下内容</h3><p>多级引用&gt;</p><p>Latex公式：ctrl+shift+M</p><script type="math/tex; mode=display">E = mc^2</script><script type="math/tex; mode=display">\boxed {E=mc^2}</script><script type="math/tex; mode=display">\sum_{i=1}^n a_i</script><script type="math/tex; mode=display">x_{ij}^2\quad \sqrt{x}\quad \sqrt[3]{x}</script><script type="math/tex; mode=display">\frac{1}{2}</script><script type="math/tex; mode=display">\pm\; \times\; \div\; \cdot\; \cap\;\cup\;\geq\;\leq\;\neq\;\approx\;\equiv\;</script><script type="math/tex; mode=display">\sum\; \prod\; \lim\;\int\;</script><p>test</p><script type="math/tex; mode=display">lim_{1\to+\infty}P(|\frac{1}{n}\sum_i^nX_i-\mu|<\epsilon>)=1,i=1,...,n</script><p><a href="https://blog.csdn.net/u014630987/article/details/70156489" title="Markdown中Latex数学公式基本语法">详见</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;br&gt;markdown编译器各平台支持性不同&lt;/p&gt;
&lt;h2 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h2&gt;&lt;h3 id=&quot;1-1-设计</summary>
      
    
    
    
    
    <category term="技术杂谈" scheme="https://fy-han.github.io.git/tags/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>第30周至9.26</title>
    <link href="https://fy-han.github.io.git/blog/2021/9/22/2021%E5%91%A8%E6%8A%A5-3%E5%AD%A3%E5%BA%A6-2021-9-22-%E7%AC%AC30%E5%91%A8%E8%87%B39-26/"/>
    <id>https://fy-han.github.io.git/blog/2021/9/22/2021%E5%91%A8%E6%8A%A5-3%E5%AD%A3%E5%BA%A6-2021-9-22-%E7%AC%AC30%E5%91%A8%E8%87%B39-26/</id>
    <published>2021-09-21T16:03:56.000Z</published>
    <updated>2021-09-22T16:20:04.234Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d6162bb9c967531bfe16d1738837f3298f4eb8e7ba703f4510ef9d8c83c662be">4d26c1cd31922c8bdc126de486d7c94bdf653074f535d23ec3e0e9f451f45021f35cd1e04ffe7c30b0f6b8e7d2e5709ceefb9350da4c4964f7260787a644c07269334c2186e623c4cc618cb681791c9ebbd6480629fca97fa01521b8bd28c6c4f509939c90444bd274fa120aab70c631095542291586971dbbca39a46fcc610af821c57e3360d1c22ec74a66dd04eae94aa1fe60d39ca309c9c96ddaab315abe332db06be20e653a35ffe81750704f7c970fb82153632a83d62320818a9c078550e929aeb97d817a276653a53c8571769a58d4caf3eff6230b52fe54eeb9ca892727b371c5850b51a740c686aedf87099222fc514b9be87359aca34492ccfe795957e76b7fb67b2b4487080869a33e743824ad2c745e872ff8f5d7fa5d8c9549ba913815ac24eacaf790ef8f22d4ce94450f9eb8680a94812a9e2e1589a44a44fd90de9f64a21eaa59d5e8a4aa8cedbb1d05a9788ce440b0e02afcf2ef537b5df1cbc35ae643c13c8baa904b3410e87eadb2b86e5dda6e33a3c4bf4bb40b42f9a9f4f668ec8ea6feeae0fcdccda3439934b4503bd0921f9a31e7f0f2dc210d783414f205dc059fe98bd1222db269fa11977e6e86376cfad7815f065fa57392bc8c14edd45f9ff6c13ecf515d0897e821d9cb8a012e5a98ba35c2bd990b86a9567ff8da60f94b38990db53d33a28cbf6af90cfa65e826a8d003684f49138111ef</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
    <category term="周报" scheme="https://fy-han.github.io.git/tags/%E5%91%A8%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>第29周至9.19</title>
    <link href="https://fy-han.github.io.git/blog/2021/9/14/2021%E5%91%A8%E6%8A%A5-3%E5%AD%A3%E5%BA%A6-2021-9-14-%E7%AC%AC29%E5%91%A8%E8%87%B39-19/"/>
    <id>https://fy-han.github.io.git/blog/2021/9/14/2021%E5%91%A8%E6%8A%A5-3%E5%AD%A3%E5%BA%A6-2021-9-14-%E7%AC%AC29%E5%91%A8%E8%87%B39-19/</id>
    <published>2021-09-14T01:42:26.000Z</published>
    <updated>2021-09-21T16:17:45.380Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d3aed15b7f991814381e1be754252ff35f10cea47b0536064584b06f585a9083">4d26c1cd31922c8bdc126de486d7c94bdf653074f535d23ec3e0e9f451f450216cc9dab000b87f1a90271fe4b0f0e20e688722d1bc16696194197589f23b9bc85c5219fd31b83e8f730be323803f00b31fcd5df9bd8909b0d5590fa3438284616cb5e5c0807d7faa2e4dc3e3edb1f61bb75104a926599b4b18955e338e090d96c6b966c67d100752acb132670fefe52965beaffb8531406d2127fd652ef4762e6d5bb9c91fc56c165ac16ad62752e4b49f1697da448e84f3775e596f58e4cd260ebc5425471f6006ab8ecbd49a2fb4fe81956179d69b3c272d998f854150a9714bf392085f244672b941eac8b5859f2c622937b72c2d67edf1de428fa00699362aa5732565ba6d70aee91c14d0882ab6343a0ae63427abddc2c0bec0c8977d59d7bb75bf409b6e747ac9105d06c70cab222a4c83abd4582ef95113eeb2453494d541354a2c70985b8ff3343ed0325c85c31bf97677b93950b005289bf092121dbec538d55a91ac06ead4f69a5ea0b9831340c127aa6f793691937c84f7a5c479c591171e33712c0818d3c0dc85c677a603a20d8e0ae0fdc9da16926e0ddf22845c949de8abe05b40661ca612311bc63110e09a07f664669dc95dabf5aab34f16ae4b8d5e6059f8a126ea660420e5b1a541db6b6069b44b794f56482532ddb303696f366ffcee49f7c52cfd661e83ba7bb4568b6a39aed20cbbf7e1ef945370680acbcfaa9336e0bb0b582a191114dc1ed46343dc549eb0b8fb8c89a0da3594492050d45f775074a7f5738b793efaf8e6495c942806b1d6818a75bd82b73dd93f4783c860f45a7a036492df5157e3ca89ff35e889194e3450d548b95bb9ea493a5c27fff65a4359a0196c618d65b3af2fc2ed4ab7a98039d8c698f83b8ab8a4f9b9fd95f624c1989c44f9349a5506dc78c633e119212f59040ce9baa3321b7468ec472b9ced2ea3b3af4e7dc9f1b8aea0c79d4d710c2d31bfe5166a8cff12d04903e05ae35698c8d2ade8a29bcf1389a38a15c3993fff9b30daff2c99d199743a5d7f9b7805709a5eedf6d2aaccf22d954fd358810993cef5dcb96930c9d9b6b29bb16d7cf5d3a8994c99cdc625b210ece51cea481e61b661e5741afb133b66f152c51243cae0eae4714373a2dabd0ef91304daf8e2bf3147a4ae96301c11714063dbf202dc0d835427f0d30b717120786123007ac562db5556cefffd486fc63e2dcfa39c5d2025ccd56fc2cb952a935c8d9660d28b09bd09d22cb3d7a5d500433fc3fa14782b4196cf0b824b6c97f01ed98cef3bd6269236a1f1dcbb37508b4be2f8f89f9adc262e731d8e10ab6a4aa3dee4b04e37aab5371c5f9a26b044f8cf97ed230d68f7a19995a774f45a47f5e6e255733dc540351d2e3e9318d8853cbdc53947434ec4f5fa3d0342e4d963d1f04855f55ce99dd503b9a32fcdb31e98950adb76455e239ba1877e2c4839d92869774a8067aefe71829e8f3734be076407655b0cde96c75ab0d6d89cc88e2424bb7f66bcaa3f20f2e376b909cab8daf4d22ffedb2d98e76b907538a7a43a922dfb3ad81b5094152de234975bfeaa360a8a64a04780ed0fb20d26448cbf1ab4ec70cf728af71036d9ac7f5fd496b93c2dc5e1f1b4e6e37d5d5d2f1febeabddea78c9b1015fe60fbcd8b192b1e7eacaefd6fa6c3b3dcf6c359b7a2529c0b4e7e0fd11910dab799790645d1171583d1f1c053e0913ba35b66f2658ea7a5b72c64af626bf5fa16762127cc5937aba59ad18c37daa095f30ddbb5cb83703625e8451cc394325e9891966a95ba6acadcc1147185fc8a2406df14656b038a88cd71d8e0c4d82ea188a8b449c51dbe95744e615277a83983a80328a1d592f67eaf57c22edadcac31ad31cad796bd185aa899f6b28f7b03c9b21d58e33d268ff0549afcacff4e52001654207d6ef2ea05d533fabfcba7ddc0df2376beaaaa90dcb567238ce73ff4c13ee33f43ad0e43f6397cf3fd9c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
    <category term="周报" scheme="https://fy-han.github.io.git/tags/%E5%91%A8%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>申请课</title>
    <link href="https://fy-han.github.io.git/blog/2021/9/11/2021%E5%91%A8%E6%8A%A5-3%E5%AD%A3%E5%BA%A6-2021-9-11-%E7%94%B3%E8%AF%B7%E8%AF%BE/"/>
    <id>https://fy-han.github.io.git/blog/2021/9/11/2021%E5%91%A8%E6%8A%A5-3%E5%AD%A3%E5%BA%A6-2021-9-11-%E7%94%B3%E8%AF%B7%E8%AF%BE/</id>
    <published>2021-09-11T01:47:05.000Z</published>
    <updated>2021-09-14T01:43:26.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小秘"><a href="#小秘" class="headerlink" title="小秘"></a>小秘</h2><p>大学+项目+admission + @ 找小秘邮箱</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;小秘&quot;&gt;&lt;a href=&quot;#小秘&quot; class=&quot;headerlink&quot; title=&quot;小秘&quot;&gt;&lt;/a&gt;小秘&lt;/h2&gt;&lt;p&gt;大学+项目+admission + @ 找小秘邮箱&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="周报" scheme="https://fy-han.github.io.git/tags/%E5%91%A8%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>AI 第二节（绘图）</title>
    <link href="https://fy-han.github.io.git/blog/2021/9/7/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF-ai-2021-9-7-AI-%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E7%BB%98%E5%9B%BE%EF%BC%89/"/>
    <id>https://fy-han.github.io.git/blog/2021/9/7/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF-ai-2021-9-7-AI-%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E7%BB%98%E5%9B%BE%EF%BC%89/</id>
    <published>2021-09-07T14:32:14.000Z</published>
    <updated>2021-09-14T16:03:45.916Z</updated>
    
    <content type="html"><![CDATA[<h2 id="画细胞膜"><a href="#画细胞膜" class="headerlink" title="画细胞膜"></a>画细胞膜</h2><p>铅笔工具画完后，创建画笔工具进行模板绘画</p><h2 id="嵌入效果"><a href="#嵌入效果" class="headerlink" title="嵌入效果"></a>嵌入效果</h2><p>用内发光+偏移路径（1px），多出一层，然后路径查找器减去底层就合并了</p><h2 id="扩展绘图"><a href="#扩展绘图" class="headerlink" title="扩展绘图"></a>扩展绘图</h2><p>选中图形后再用铅笔绘图，可以直接合并</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;画细胞膜&quot;&gt;&lt;a href=&quot;#画细胞膜&quot; class=&quot;headerlink&quot; title=&quot;画细胞膜&quot;&gt;&lt;/a&gt;画细胞膜&lt;/h2&gt;&lt;p&gt;铅笔工具画完后，创建画笔工具进行模板绘画&lt;/p&gt;
&lt;h2 id=&quot;嵌入效果&quot;&gt;&lt;a href=&quot;#嵌入效果&quot; class=&quot;</summary>
      
    
    
    
    
    <category term="ai" scheme="https://fy-han.github.io.git/tags/ai/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://fy-han.github.io.git/blog/2021/9/4/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF-web-develop-HTML5-CSS3-first-html/"/>
    <id>https://fy-han.github.io.git/blog/2021/9/4/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF-web-develop-HTML5-CSS3-first-html/</id>
    <published>2021-09-04T02:29:50.155Z</published>
    <updated>2021-09-04T02:32:08.896Z</updated>
    
    <content type="html"><![CDATA[<!DOCTYPE html><html>    <head>        <title>第一个程序</title>    </head>    <body>        <h1>Hello World</h1>        <p>I'm gonna upload gan model</p>    </body></html>]]></content>
    
    
      
      
    <summary type="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;第一个程序&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Hello World&lt;/h1&gt;
        &lt;p&gt;I&#39;m gonna uplo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>web开发第一节</title>
    <link href="https://fy-han.github.io.git/blog/2021/9/4/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF-web-develop-HTML5-CSS3-2021-9-4-web%E5%BC%80%E5%8F%91%E7%AC%AC%E4%B8%80%E8%8A%82/"/>
    <id>https://fy-han.github.io.git/blog/2021/9/4/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF-web-develop-HTML5-CSS3-2021-9-4-web%E5%BC%80%E5%8F%91%E7%AC%AC%E4%B8%80%E8%8A%82/</id>
    <published>2021-09-04T02:01:27.000Z</published>
    <updated>2021-09-04T02:11:05.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一节"><a href="#第一节" class="headerlink" title="第一节"></a>第一节</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一节&quot;&gt;&lt;a href=&quot;#第一节&quot; class=&quot;headerlink&quot; title=&quot;第一节&quot;&gt;&lt;/a&gt;第一节&lt;/h2&gt;</summary>
      
    
    
    
    
    <category term="web" scheme="https://fy-han.github.io.git/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>AI 第一节</title>
    <link href="https://fy-han.github.io.git/blog/2021/8/16/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF-ai-2021-8-16-AI-%E7%AC%AC%E4%B8%80%E8%8A%82/"/>
    <id>https://fy-han.github.io.git/blog/2021/8/16/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF-ai-2021-8-16-AI-%E7%AC%AC%E4%B8%80%E8%8A%82/</id>
    <published>2021-08-16T14:17:32.000Z</published>
    <updated>2021-08-30T13:50:19.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><pre><code>alt+滚轮 放缩    空格+左键 平移     Ctrl+滚轮 水平移动      TAB 全屏       Ctrl+0 恢复空格+鼠标拖拽 抓手      Ctrl+r 标尺     Ctrl+；参考线       Ctrl+&quot; 网格    CtrlCtrl+Y 轮廓模式     Ctrl+Alt+Y 像素模式     Ctrl+Shift+AltY 叠印模式Ctrl+2 锁定图层，对应ctrl+alt+2     </code></pre><ol><li><p>选择工具<br> Ctrl 临时选择工具<br> V 选择工具    shift 等比拉伸，alt 以中心点拉伸<br> A 直接选择工具，可以移动变形（需双击）  也可以使用套索工具<br> 使用 ctrl + shift +b锁住定界框（失去白色小点，不能改变大小了），ctrl+h隐藏路径<br> 色彩辨别（眯眼），用魔棒<br> Ctrl+C Ctrl+B 原位粘贴</p></li><li><p>填色描边<br> 前后互换 X      颜色互换 Shift+X       比例缩放工具：等比圆滑放缩       倾斜工具：点住不变的点，进行倾斜<br> Ctrl+d 重复操作         Alt 复制        Alt+Shift<br> 颜色渐变</p></li></ol><ol><li><p>钢笔工具<br> 先点起点，然后在落点拉切线<br> 长按左键拉出切线，用ctrl暂时取消，双击空白      按住alt键拉切线 按shift辅助直线与45°倍数角<br> 按shift+c完成并选择锚点工具<br> 钢笔工具练习网站：<a href="https://bezier.method.ac/">https://bezier.method.ac/</a>     </p></li><li><p>图层<br> Ctrl+[ 上下移动图层中子图层位置关系</p></li><li><p>文字<br> Ctrl+T 文本编辑框       Alt+上下左右调整字间距行间距        Shift+T 编辑文本        可以在创建的路径上编辑文字<br> Ctrl+Shift+O 将文字转成文本轮廓（才能进行拖拽变形）<br> <em>路径查找器合并多个路径</em><br> 如果有奇怪的白色在比如里字的每个“口”里（不知为何），可以栅格化解决问题</p></li><li><p>效果<br> 旋转，比如六边形的内旋，然后<br> 混合工具：形成图形的渐变,也可以形成立体效果（先后点击两个物体即可）</p></li><li><p>重新着色图稿<br> 选中后，编辑——颜色——重新着色图稿</p><ul><li><p>注意填色是填充路径的颜色（不太懂原理），如果给裁剪后的图形，如圆，进行局部填色会导致填路径内。进行扩展外观后，失去边缘路径，重新把所有性状变成“内容”</p><ul><li>扩展（不要勾选填充，否则填充和线被拆分开），最后使用路径查找器拼合</li></ul></li><li><p>轮廓化描边</p><ul><li>在路径中，将描边变成可以选中的路径，进而可以渐变颜色，或者加图案</li></ul></li></ul></li></ol><pre><code>autodock   md (继续学习)，lipid（加多少，位置，pbsa的trick  两个dieletric  ，mscl，外部环境不同，） online programme   做网站c psp  wuyuhui（）爱么生  用，fishop   gnn model（放到网上）更大的库（nature product），structure 已经筛了两个（geometry）online lipidmscl docking glide(autodock), online programme()</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础操作&quot;&gt;&lt;a href=&quot;#基础操作&quot; class=&quot;headerlink&quot; title=&quot;基础操作&quot;&gt;&lt;/a&gt;基础操作&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;alt+滚轮 放缩    空格+左键 平移     Ctrl+滚轮 水平移动      TAB 全屏    </summary>
      
    
    
    
    
    <category term="ai" scheme="https://fy-han.github.io.git/tags/ai/"/>
    
  </entry>
  
  <entry>
    <title>moe教程-1</title>
    <link href="https://fy-han.github.io.git/blog/2021/8/12/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E5%88%86%E5%AD%90%E6%A8%A1%E6%8B%9F-MOE-2021-8-12-moe%E6%95%99%E7%A8%8B-1/"/>
    <id>https://fy-han.github.io.git/blog/2021/8/12/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0-%E5%88%86%E5%AD%90%E6%A8%A1%E6%8B%9F-MOE-2021-8-12-moe%E6%95%99%E7%A8%8B-1/</id>
    <published>2021-08-12T08:28:20.000Z</published>
    <updated>2021-08-24T15:11:01.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总论"><a href="#总论" class="headerlink" title="总论"></a>总论</h2><ol><li>可以在windows里找到开了哪些窗口</li><li>可以研究tutorials做深入学习理解</li><li>SVL共享脚本（可以学习理解）</li><li>SVL：记录所有命令记录，SEQ（序列编辑框），DBV（数据库）</li><li>左下角力场，与周期性边界条件</li><li>创建工作路径cwd</li><li>open的时候：PSILO晶体结构数据库（要钱），以及pdb database（需正版）。ok（关闭panel），apply（不关闭）</li></ol><h2 id="OPEN-Panel"><a href="#OPEN-Panel" class="headerlink" title="OPEN Panel"></a>OPEN Panel</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;总论&quot;&gt;&lt;a href=&quot;#总论&quot; class=&quot;headerlink&quot; title=&quot;总论&quot;&gt;&lt;/a&gt;总论&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;可以在windows里找到开了哪些窗口&lt;/li&gt;
&lt;li&gt;可以研究tutorials做深入学习理解&lt;/li&gt;
&lt;li&gt;SVL共享</summary>
      
    
    
    
    
    <category term="moe" scheme="https://fy-han.github.io.git/tags/moe/"/>
    
  </entry>
  
  <entry>
    <title>第22周7.25-8.1</title>
    <link href="https://fy-han.github.io.git/blog/2021/7/31/2021%E5%91%A8%E6%8A%A5-3%E5%AD%A3%E5%BA%A6-2021-7-31-%E7%AC%AC22%E5%91%A87-25-8-1/"/>
    <id>https://fy-han.github.io.git/blog/2021/7/31/2021%E5%91%A8%E6%8A%A5-3%E5%AD%A3%E5%BA%A6-2021-7-31-%E7%AC%AC22%E5%91%A87-25-8-1/</id>
    <published>2021-07-31T01:35:33.000Z</published>
    <updated>2021-08-17T02:38:42.673Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b52a1ac6f2a20acfabeaea2745a6485df1b9210b852a3e9b33485babc276c234">4d26c1cd31922c8bdc126de486d7c94b8f1b7edf4f52d10c9747eb2fbe8dcf5285505e062475728abcb97cb2919cccc702e11c536a6c79da25e4819905bc75edad6f322ad60de659de9d72020792b42d91b51c3c70b94b6c3bcdef5002f15d4d6942ea6cd93014ed6b6b6934c16dcb0f1df90e312b95f06e0ab163d48616ba0d460db819c762607e0fa5eeab63e1248a487673f256a435728b8bea8477089bcfb37e95d135cb5c7bf6b8873785ad9e29ced115820c4e0d44df9dceb9f1bbe54eaa1e8e9fd455930396c07ab3fb72522232fc2cf41bb35d8d9c1c629c96a243c57f5ce87caf0c2248b6f3f3958248b06f1f4bf8a608b676e03e1ae89762747c996520cda01fc2eec9bc45b5466feeebc65326164dd94649174dfb427d0f424142aa4e816236135d3cdd6ca3277ba060303638954bf9c641c9d31b3c3448fc8c7fb23138c063cbe344f466e4e7821599e047e8fd5930adb516a5ce7eb8ecf3eee70e9b89cc6f069681d4a2fced7a1106aaaff8b54e97bad1d40502e9265f46a3cdba5b2fee870929f08f8969fc2b69ebaf2fdd8f5120a82f2aebd5697f8aaa7a7c6672b4b987bbf70df8e45db57d6def6e26c898160a9cf48dc1fd5b1fd1430158a34cfeef8061ef8150b9badf840408be9ae7557e46f27f319ad2f5797142847e7e6d97b174666a3892d2159817f087c2035ef6a138cf4c2266c2b75eeb3b0f7170f220c1a51fff515c839f5e4983200d58a73094675204df2775fb085dece082eed706052a531e590fcde8304441b79a029543c9549ac162c2270d03ce13600263e108ffd9e3335594e6df615c318bbce5b8ffc48dd90af48b63f75d6f1a924fad664475e395cbc94f046c726cc61566083110f26bf0d01ccf68d6b4253bb4eec6f83f32b1c929b5cfddc38aec3fad0701db8e20f7a8e8304c7381c89cd5c7fca605c14666e5ca541d5a346b7cfa5a618511fa9ef4da76a6dd892560fd0f9f0051bb62d47e91dae7f60e4a3521081e7b96dca92e5e87f5027c39262e654c919a2d2899186286f6c2bf2840b9fc38911b7f200f108d25da5152bff535b0a9095980c8ea6d332833674af13cb631516fc5896f77f75c85e10895ee89cdb7d3799b26bd3eb1dbfb2497bdd1d389cabb24daa588fceb7e6c3a484682176b994358e4929dd753b73a0c1d8991f7fac184ee17bd713f7bdabc1af5bc6dad77973d8b7fe80a23b9e7acb6301f7393a5a2d6613e975d778d8869b8062f245b9d91ca48896257a6494db04dc20ff81f2d71e3c6eb1d8cca55e32ca3ce36f8d70c98fd784449543bd2036f8983a1165dd9f6a7887f7bc809cc844993aa5550140c4fef23288a6d72977993df60292da24006f6fd8fe97e02a1605dc330287d4c8e757f383af5fd2054e848215e5f05bc221a0d0ffa50f6c5dd615b4f6a9a6342a9947f3ee0642bad1201870d4b4af8aa608fefe1062228b4c8d83c8c122f5388c2acd34ddff81b0417e9178cd4257cb93bfcd57ae0d2f064412a7c65e98bb36a40632cbb39439c4c4740151312c9113b3bf2bbf0fb658d511331545ce426040c1dd68735a677313fb9782fd7b7a9080adbd9cbe5a34ead42ba98d528b39bb89359fec8743242866d043135854bf6d7a9d7281258ecb679a5169c0681a1cd00aaf68784f20c212be6bb006b3f34d96c6e730ebeb5e74a12af093d86258b935dec1d226ffaec5e358bea6b49f276efed6020440026f3eaa9e22865b29a5b1852f1db2e3e99c583f47296c6a8d32108a5613dd043aab39f121e95dc5b4035faeeceb9022602a0a646eba570d73bbf428c89eed0c44ae397a5414c40bd0f897a3ee7bef35f184ebd32f625114660da4deebcf44ef940da82e0eb42a3dee9a269879733e971dff4cadbe688e9913be01db92ba62918a5e942270b92f3690adc9d1291b8f350b68a231097d93f51f161104882d920124bea21fd785e0f2b7d16119b53e91231c7d41e91062a9298f854b99e103cbceff21c71f29cc3c8e58025436f0977f6f4e1d863e6cfca23b7ee8b03a6a82d7de944857aa282c6450494a7ac5454a851402af48002396a896a219244b3dcd6ade5dd329411fe0393792e38bcdbff9dfd473cf60fca5620211ade321153911ad90e2cb77ecfca44792b6825e12210dad4ea4060e9300808beed07d19ba88add4c887f9abfc8b2d6aa7b54559ce97b8a185087be234cfd3e4d627a0a5aff2907648e6f1557cccb7d34686061ec8b62c52ee7cfa35240fcbb58684264d3e80b00bece743ec9f083cbd629be72a49493ea6b945c061df65830641a3ec276be18fe217c4c0151933b64becf1e54c83b37679fd57200c522478513b5852b2bca7b0e87c311935b98fcc30ba81bcb09257128e0bacfd8d453056e49ff12dba56d4964c7fe0e3802ccf1ece625c07580fe374eba450d83a7fa840bd9633c6c0d3a7efe93ff8895df68a5dc7afd15142ac0d93765f47d29994a86b038eaecd2539b63dc5bfb130a110e99610bdd30687323c1c5659dee2114e76281ce8a4fd2cafc06107e48d7e4185960f0faf095711d1df8572eef1a279ba37deb7b555c2059f76a85ef65978946959d7ca1fdb65d42e33e113565697f62a72e88df833b55273a725da8ca5193d48fafa27a8b35ae1dd5a97e337f4c9c60d90d2830151540c16aa0edf5d865fd1bee94210bc26d7561f565f07ae145c9bf537542a89f838b71b89b7d915d9d7a88feb8035c1c2e35747e080a753f5eff8c5161fde0a59a19396f604fa1d87134b51d890eb6b031586a318a57ef916e78c34663683b854bfe990ab226574cb3021695340e76d9fe85071433615adea8b9d12d6818dbb4a002422ce429f3e5b6bded122823806bb7715f3e18ab6bb39663eae77ca3e3c3ca50dceb407c4c6601a566cc2291d3df8896d10ddfd7e1692bf286d391377547825239d082fa710490ebca30bc2e08e46733ce0a5132e68f1256403eba2ef0600f250a7a9aeaa3272e8e5c075abc9aa3fbaaddc7ee997d88c02a5fa24629fa4d3c1288b98a7dded932fe2e99ca5766f4ea58235e7b6c8fcc195d7e1fd5e0a50b0c2506398651f8c041fa59ddfcfd16184063cfb10e9ca1a2f0d78d6bc88a8be2c37c28ccfaa278fd5883d97ed6a83857cf939e574d4067c6113c44949e9069c691859271a195f92bf2bf61e18bd7d182b8e6cdd1b4b76ea3402699fe7e3fc40fde38de167a8a5fda38e3bbe2a5ef74dd7b9b332e9bedb87b9261828e5b0850ef571ecfa70bcdd5d4b5c634141fc50f0c1b4c4c05aa8dae1c976c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
    <category term="周报" scheme="https://fy-han.github.io.git/tags/%E5%91%A8%E6%8A%A5/"/>
    
  </entry>
  
</feed>
